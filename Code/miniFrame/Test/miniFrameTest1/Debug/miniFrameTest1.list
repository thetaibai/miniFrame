
miniFrameTest1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08002000  08002000  00002000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000018c8  0800210c  0800210c  0000210c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000004c  080039d4  080039d4  000039d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003a20  08003a20  0001040c  2**0
                  CONTENTS
  4 .ARM          00000000  08003a20  08003a20  0001040c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003a20  08003a20  0001040c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003a20  08003a20  00003a20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003a24  08003a24  00003a24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000400  08003a28  00010400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000078  2000040c  08003a34  0001040c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000484  08003a34  00010484  2**0
                  ALLOC
 11 .noinit_ram   00000000  20000000  20000000  0001040c  2**0
                  CONTENTS
 12 .ARM.attributes 00000029  00000000  00000000  0001040c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000868c  00000000  00000000  00010435  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001b0c  00000000  00000000  00018ac1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000a00  00000000  00000000  0001a5d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000008f8  00000000  00000000  0001afd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00016b96  00000000  00000000  0001b8c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000b663  00000000  00000000  0003245e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008233e  00000000  00000000  0003dac1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  000bfdff  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000026ec  00000000  00000000  000bfe50  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800210c <__do_global_dtors_aux>:
 800210c:	b510      	push	{r4, lr}
 800210e:	4c05      	ldr	r4, [pc, #20]	; (8002124 <__do_global_dtors_aux+0x18>)
 8002110:	7823      	ldrb	r3, [r4, #0]
 8002112:	b933      	cbnz	r3, 8002122 <__do_global_dtors_aux+0x16>
 8002114:	4b04      	ldr	r3, [pc, #16]	; (8002128 <__do_global_dtors_aux+0x1c>)
 8002116:	b113      	cbz	r3, 800211e <__do_global_dtors_aux+0x12>
 8002118:	4804      	ldr	r0, [pc, #16]	; (800212c <__do_global_dtors_aux+0x20>)
 800211a:	f3af 8000 	nop.w
 800211e:	2301      	movs	r3, #1
 8002120:	7023      	strb	r3, [r4, #0]
 8002122:	bd10      	pop	{r4, pc}
 8002124:	2000040c 	.word	0x2000040c
 8002128:	00000000 	.word	0x00000000
 800212c:	080039bc 	.word	0x080039bc

08002130 <frame_dummy>:
 8002130:	b508      	push	{r3, lr}
 8002132:	4b03      	ldr	r3, [pc, #12]	; (8002140 <frame_dummy+0x10>)
 8002134:	b11b      	cbz	r3, 800213e <frame_dummy+0xe>
 8002136:	4903      	ldr	r1, [pc, #12]	; (8002144 <frame_dummy+0x14>)
 8002138:	4803      	ldr	r0, [pc, #12]	; (8002148 <frame_dummy+0x18>)
 800213a:	f3af 8000 	nop.w
 800213e:	bd08      	pop	{r3, pc}
 8002140:	00000000 	.word	0x00000000
 8002144:	20000410 	.word	0x20000410
 8002148:	080039bc 	.word	0x080039bc

0800214c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800214c:	b480      	push	{r7}
 800214e:	b083      	sub	sp, #12
 8002150:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002152:	4b0e      	ldr	r3, [pc, #56]	; (800218c <MX_GPIO_Init+0x40>)
 8002154:	699b      	ldr	r3, [r3, #24]
 8002156:	4a0d      	ldr	r2, [pc, #52]	; (800218c <MX_GPIO_Init+0x40>)
 8002158:	f043 0320 	orr.w	r3, r3, #32
 800215c:	6193      	str	r3, [r2, #24]
 800215e:	4b0b      	ldr	r3, [pc, #44]	; (800218c <MX_GPIO_Init+0x40>)
 8002160:	699b      	ldr	r3, [r3, #24]
 8002162:	f003 0320 	and.w	r3, r3, #32
 8002166:	607b      	str	r3, [r7, #4]
 8002168:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800216a:	4b08      	ldr	r3, [pc, #32]	; (800218c <MX_GPIO_Init+0x40>)
 800216c:	699b      	ldr	r3, [r3, #24]
 800216e:	4a07      	ldr	r2, [pc, #28]	; (800218c <MX_GPIO_Init+0x40>)
 8002170:	f043 0304 	orr.w	r3, r3, #4
 8002174:	6193      	str	r3, [r2, #24]
 8002176:	4b05      	ldr	r3, [pc, #20]	; (800218c <MX_GPIO_Init+0x40>)
 8002178:	699b      	ldr	r3, [r3, #24]
 800217a:	f003 0304 	and.w	r3, r3, #4
 800217e:	603b      	str	r3, [r7, #0]
 8002180:	683b      	ldr	r3, [r7, #0]

}
 8002182:	bf00      	nop
 8002184:	370c      	adds	r7, #12
 8002186:	46bd      	mov	sp, r7
 8002188:	bc80      	pop	{r7}
 800218a:	4770      	bx	lr
 800218c:	40021000 	.word	0x40021000

08002190 <MX_IWDG_Init>:

IWDG_HandleTypeDef hiwdg;

/* IWDG init function */
void MX_IWDG_Init(void)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 8002194:	4b09      	ldr	r3, [pc, #36]	; (80021bc <MX_IWDG_Init+0x2c>)
 8002196:	4a0a      	ldr	r2, [pc, #40]	; (80021c0 <MX_IWDG_Init+0x30>)
 8002198:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_4;
 800219a:	4b08      	ldr	r3, [pc, #32]	; (80021bc <MX_IWDG_Init+0x2c>)
 800219c:	2200      	movs	r2, #0
 800219e:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Reload = 4095;
 80021a0:	4b06      	ldr	r3, [pc, #24]	; (80021bc <MX_IWDG_Init+0x2c>)
 80021a2:	f640 72ff 	movw	r2, #4095	; 0xfff
 80021a6:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 80021a8:	4804      	ldr	r0, [pc, #16]	; (80021bc <MX_IWDG_Init+0x2c>)
 80021aa:	f000 fb0c 	bl	80027c6 <HAL_IWDG_Init>
 80021ae:	4603      	mov	r3, r0
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d001      	beq.n	80021b8 <MX_IWDG_Init+0x28>
  {
    Error_Handler();
 80021b4:	f000 f870 	bl	8002298 <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 80021b8:	bf00      	nop
 80021ba:	bd80      	pop	{r7, pc}
 80021bc:	20000428 	.word	0x20000428
 80021c0:	40003000 	.word	0x40003000

080021c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80021c8:	f000 f974 	bl	80024b4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80021cc:	f000 f80e 	bl	80021ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80021d0:	f7ff ffbc 	bl	800214c <MX_GPIO_Init>
  MX_TIM2_Init();
 80021d4:	f000 f8d8 	bl	8002388 <MX_TIM2_Init>
  MX_IWDG_Init();
 80021d8:	f7ff ffda 	bl	8002190 <MX_IWDG_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 80021dc:	4802      	ldr	r0, [pc, #8]	; (80021e8 <main+0x24>)
 80021de:	f000 ff71 	bl	80030c4 <HAL_TIM_Base_Start_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  OS();
 80021e2:	f001 fb37 	bl	8003854 <OS>
 80021e6:	e7fc      	b.n	80021e2 <main+0x1e>
 80021e8:	20000434 	.word	0x20000434

080021ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b090      	sub	sp, #64	; 0x40
 80021f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80021f2:	f107 0318 	add.w	r3, r7, #24
 80021f6:	2228      	movs	r2, #40	; 0x28
 80021f8:	2100      	movs	r1, #0
 80021fa:	4618      	mov	r0, r3
 80021fc:	f001 fbd6 	bl	80039ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002200:	1d3b      	adds	r3, r7, #4
 8002202:	2200      	movs	r2, #0
 8002204:	601a      	str	r2, [r3, #0]
 8002206:	605a      	str	r2, [r3, #4]
 8002208:	609a      	str	r2, [r3, #8]
 800220a:	60da      	str	r2, [r3, #12]
 800220c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 800220e:	2309      	movs	r3, #9
 8002210:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002212:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002216:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8002218:	2300      	movs	r3, #0
 800221a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800221c:	2301      	movs	r3, #1
 800221e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8002220:	2301      	movs	r3, #1
 8002222:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002224:	2302      	movs	r3, #2
 8002226:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002228:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800222c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800222e:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8002232:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002234:	f107 0318 	add.w	r3, r7, #24
 8002238:	4618      	mov	r0, r3
 800223a:	f000 fb15 	bl	8002868 <HAL_RCC_OscConfig>
 800223e:	4603      	mov	r3, r0
 8002240:	2b00      	cmp	r3, #0
 8002242:	d001      	beq.n	8002248 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 8002244:	f000 f828 	bl	8002298 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002248:	230f      	movs	r3, #15
 800224a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800224c:	2302      	movs	r3, #2
 800224e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002250:	2300      	movs	r3, #0
 8002252:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002254:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002258:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800225a:	2300      	movs	r3, #0
 800225c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800225e:	1d3b      	adds	r3, r7, #4
 8002260:	2102      	movs	r1, #2
 8002262:	4618      	mov	r0, r3
 8002264:	f000 fd82 	bl	8002d6c <HAL_RCC_ClockConfig>
 8002268:	4603      	mov	r3, r0
 800226a:	2b00      	cmp	r3, #0
 800226c:	d001      	beq.n	8002272 <SystemClock_Config+0x86>
  {
    Error_Handler();
 800226e:	f000 f813 	bl	8002298 <Error_Handler>
  }
}
 8002272:	bf00      	nop
 8002274:	3740      	adds	r7, #64	; 0x40
 8002276:	46bd      	mov	sp, r7
 8002278:	bd80      	pop	{r7, pc}

0800227a <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800227a:	b580      	push	{r7, lr}
 800227c:	b082      	sub	sp, #8
 800227e:	af00      	add	r7, sp, #0
 8002280:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
	if(TIM2 == htim->Instance)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800228a:	d101      	bne.n	8002290 <HAL_TIM_PeriodElapsedCallback+0x16>
	{
		LittleHeartFunc();
 800228c:	f001 fad6 	bl	800383c <LittleHeartFunc>
	}

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8002290:	bf00      	nop
 8002292:	3708      	adds	r7, #8
 8002294:	46bd      	mov	sp, r7
 8002296:	bd80      	pop	{r7, pc}

08002298 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002298:	b480      	push	{r7}
 800229a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800229c:	b672      	cpsid	i
}
 800229e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80022a0:	e7fe      	b.n	80022a0 <Error_Handler+0x8>
	...

080022a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80022a4:	b480      	push	{r7}
 80022a6:	b085      	sub	sp, #20
 80022a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80022aa:	4b15      	ldr	r3, [pc, #84]	; (8002300 <HAL_MspInit+0x5c>)
 80022ac:	699b      	ldr	r3, [r3, #24]
 80022ae:	4a14      	ldr	r2, [pc, #80]	; (8002300 <HAL_MspInit+0x5c>)
 80022b0:	f043 0301 	orr.w	r3, r3, #1
 80022b4:	6193      	str	r3, [r2, #24]
 80022b6:	4b12      	ldr	r3, [pc, #72]	; (8002300 <HAL_MspInit+0x5c>)
 80022b8:	699b      	ldr	r3, [r3, #24]
 80022ba:	f003 0301 	and.w	r3, r3, #1
 80022be:	60bb      	str	r3, [r7, #8]
 80022c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80022c2:	4b0f      	ldr	r3, [pc, #60]	; (8002300 <HAL_MspInit+0x5c>)
 80022c4:	69db      	ldr	r3, [r3, #28]
 80022c6:	4a0e      	ldr	r2, [pc, #56]	; (8002300 <HAL_MspInit+0x5c>)
 80022c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022cc:	61d3      	str	r3, [r2, #28]
 80022ce:	4b0c      	ldr	r3, [pc, #48]	; (8002300 <HAL_MspInit+0x5c>)
 80022d0:	69db      	ldr	r3, [r3, #28]
 80022d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022d6:	607b      	str	r3, [r7, #4]
 80022d8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80022da:	4b0a      	ldr	r3, [pc, #40]	; (8002304 <HAL_MspInit+0x60>)
 80022dc:	685b      	ldr	r3, [r3, #4]
 80022de:	60fb      	str	r3, [r7, #12]
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80022e6:	60fb      	str	r3, [r7, #12]
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80022ee:	60fb      	str	r3, [r7, #12]
 80022f0:	4a04      	ldr	r2, [pc, #16]	; (8002304 <HAL_MspInit+0x60>)
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80022f6:	bf00      	nop
 80022f8:	3714      	adds	r7, #20
 80022fa:	46bd      	mov	sp, r7
 80022fc:	bc80      	pop	{r7}
 80022fe:	4770      	bx	lr
 8002300:	40021000 	.word	0x40021000
 8002304:	40010000 	.word	0x40010000

08002308 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002308:	b480      	push	{r7}
 800230a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800230c:	e7fe      	b.n	800230c <NMI_Handler+0x4>

0800230e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800230e:	b480      	push	{r7}
 8002310:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002312:	e7fe      	b.n	8002312 <HardFault_Handler+0x4>

08002314 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002314:	b480      	push	{r7}
 8002316:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002318:	e7fe      	b.n	8002318 <MemManage_Handler+0x4>

0800231a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800231a:	b480      	push	{r7}
 800231c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800231e:	e7fe      	b.n	800231e <BusFault_Handler+0x4>

08002320 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002320:	b480      	push	{r7}
 8002322:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002324:	e7fe      	b.n	8002324 <UsageFault_Handler+0x4>

08002326 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002326:	b480      	push	{r7}
 8002328:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800232a:	bf00      	nop
 800232c:	46bd      	mov	sp, r7
 800232e:	bc80      	pop	{r7}
 8002330:	4770      	bx	lr

08002332 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002332:	b480      	push	{r7}
 8002334:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002336:	bf00      	nop
 8002338:	46bd      	mov	sp, r7
 800233a:	bc80      	pop	{r7}
 800233c:	4770      	bx	lr

0800233e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800233e:	b480      	push	{r7}
 8002340:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002342:	bf00      	nop
 8002344:	46bd      	mov	sp, r7
 8002346:	bc80      	pop	{r7}
 8002348:	4770      	bx	lr

0800234a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800234a:	b580      	push	{r7, lr}
 800234c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800234e:	f000 f8f7 	bl	8002540 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002352:	bf00      	nop
 8002354:	bd80      	pop	{r7, pc}
	...

08002358 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800235c:	4802      	ldr	r0, [pc, #8]	; (8002368 <TIM2_IRQHandler+0x10>)
 800235e:	f000 fefd 	bl	800315c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002362:	bf00      	nop
 8002364:	bd80      	pop	{r7, pc}
 8002366:	bf00      	nop
 8002368:	20000434 	.word	0x20000434

0800236c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800236c:	b480      	push	{r7}
 800236e:	af00      	add	r7, sp, #0
  #endif /* DATA_IN_ExtSRAM */
#endif 

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
 8002370:	4b03      	ldr	r3, [pc, #12]	; (8002380 <SystemInit+0x14>)
 8002372:	4a04      	ldr	r2, [pc, #16]	; (8002384 <SystemInit+0x18>)
 8002374:	609a      	str	r2, [r3, #8]
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002376:	bf00      	nop
 8002378:	46bd      	mov	sp, r7
 800237a:	bc80      	pop	{r7}
 800237c:	4770      	bx	lr
 800237e:	bf00      	nop
 8002380:	e000ed00 	.word	0xe000ed00
 8002384:	08001000 	.word	0x08001000

08002388 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	b086      	sub	sp, #24
 800238c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800238e:	f107 0308 	add.w	r3, r7, #8
 8002392:	2200      	movs	r2, #0
 8002394:	601a      	str	r2, [r3, #0]
 8002396:	605a      	str	r2, [r3, #4]
 8002398:	609a      	str	r2, [r3, #8]
 800239a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800239c:	463b      	mov	r3, r7
 800239e:	2200      	movs	r2, #0
 80023a0:	601a      	str	r2, [r3, #0]
 80023a2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80023a4:	4b1d      	ldr	r3, [pc, #116]	; (800241c <MX_TIM2_Init+0x94>)
 80023a6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80023aa:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 71;
 80023ac:	4b1b      	ldr	r3, [pc, #108]	; (800241c <MX_TIM2_Init+0x94>)
 80023ae:	2247      	movs	r2, #71	; 0x47
 80023b0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80023b2:	4b1a      	ldr	r3, [pc, #104]	; (800241c <MX_TIM2_Init+0x94>)
 80023b4:	2200      	movs	r2, #0
 80023b6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 80023b8:	4b18      	ldr	r3, [pc, #96]	; (800241c <MX_TIM2_Init+0x94>)
 80023ba:	f240 32e7 	movw	r2, #999	; 0x3e7
 80023be:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80023c0:	4b16      	ldr	r3, [pc, #88]	; (800241c <MX_TIM2_Init+0x94>)
 80023c2:	2200      	movs	r2, #0
 80023c4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80023c6:	4b15      	ldr	r3, [pc, #84]	; (800241c <MX_TIM2_Init+0x94>)
 80023c8:	2280      	movs	r2, #128	; 0x80
 80023ca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80023cc:	4813      	ldr	r0, [pc, #76]	; (800241c <MX_TIM2_Init+0x94>)
 80023ce:	f000 fe29 	bl	8003024 <HAL_TIM_Base_Init>
 80023d2:	4603      	mov	r3, r0
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d001      	beq.n	80023dc <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80023d8:	f7ff ff5e 	bl	8002298 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80023dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80023e0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80023e2:	f107 0308 	add.w	r3, r7, #8
 80023e6:	4619      	mov	r1, r3
 80023e8:	480c      	ldr	r0, [pc, #48]	; (800241c <MX_TIM2_Init+0x94>)
 80023ea:	f000 ffbf 	bl	800336c <HAL_TIM_ConfigClockSource>
 80023ee:	4603      	mov	r3, r0
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d001      	beq.n	80023f8 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80023f4:	f7ff ff50 	bl	8002298 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80023f8:	2300      	movs	r3, #0
 80023fa:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80023fc:	2300      	movs	r3, #0
 80023fe:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002400:	463b      	mov	r3, r7
 8002402:	4619      	mov	r1, r3
 8002404:	4805      	ldr	r0, [pc, #20]	; (800241c <MX_TIM2_Init+0x94>)
 8002406:	f001 f98b 	bl	8003720 <HAL_TIMEx_MasterConfigSynchronization>
 800240a:	4603      	mov	r3, r0
 800240c:	2b00      	cmp	r3, #0
 800240e:	d001      	beq.n	8002414 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8002410:	f7ff ff42 	bl	8002298 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002414:	bf00      	nop
 8002416:	3718      	adds	r7, #24
 8002418:	46bd      	mov	sp, r7
 800241a:	bd80      	pop	{r7, pc}
 800241c:	20000434 	.word	0x20000434

08002420 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	b084      	sub	sp, #16
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002430:	d113      	bne.n	800245a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002432:	4b0c      	ldr	r3, [pc, #48]	; (8002464 <HAL_TIM_Base_MspInit+0x44>)
 8002434:	69db      	ldr	r3, [r3, #28]
 8002436:	4a0b      	ldr	r2, [pc, #44]	; (8002464 <HAL_TIM_Base_MspInit+0x44>)
 8002438:	f043 0301 	orr.w	r3, r3, #1
 800243c:	61d3      	str	r3, [r2, #28]
 800243e:	4b09      	ldr	r3, [pc, #36]	; (8002464 <HAL_TIM_Base_MspInit+0x44>)
 8002440:	69db      	ldr	r3, [r3, #28]
 8002442:	f003 0301 	and.w	r3, r3, #1
 8002446:	60fb      	str	r3, [r7, #12]
 8002448:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800244a:	2200      	movs	r2, #0
 800244c:	2100      	movs	r1, #0
 800244e:	201c      	movs	r0, #28
 8002450:	f000 f97f 	bl	8002752 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002454:	201c      	movs	r0, #28
 8002456:	f000 f998 	bl	800278a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 800245a:	bf00      	nop
 800245c:	3710      	adds	r7, #16
 800245e:	46bd      	mov	sp, r7
 8002460:	bd80      	pop	{r7, pc}
 8002462:	bf00      	nop
 8002464:	40021000 	.word	0x40021000

08002468 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002468:	f7ff ff80 	bl	800236c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800246c:	480b      	ldr	r0, [pc, #44]	; (800249c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800246e:	490c      	ldr	r1, [pc, #48]	; (80024a0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002470:	4a0c      	ldr	r2, [pc, #48]	; (80024a4 <LoopFillZerobss+0x16>)
  movs r3, #0
 8002472:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002474:	e002      	b.n	800247c <LoopCopyDataInit>

08002476 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002476:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002478:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800247a:	3304      	adds	r3, #4

0800247c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800247c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800247e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002480:	d3f9      	bcc.n	8002476 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002482:	4a09      	ldr	r2, [pc, #36]	; (80024a8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002484:	4c09      	ldr	r4, [pc, #36]	; (80024ac <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002486:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002488:	e001      	b.n	800248e <LoopFillZerobss>

0800248a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800248a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800248c:	3204      	adds	r2, #4

0800248e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800248e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002490:	d3fb      	bcc.n	800248a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002492:	f001 fa67 	bl	8003964 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002496:	f7ff fe95 	bl	80021c4 <main>
  bx lr
 800249a:	4770      	bx	lr
  ldr r0, =_sdata
 800249c:	20000400 	.word	0x20000400
  ldr r1, =_edata
 80024a0:	2000040c 	.word	0x2000040c
  ldr r2, =_sidata
 80024a4:	08003a28 	.word	0x08003a28
  ldr r2, =_sbss
 80024a8:	2000040c 	.word	0x2000040c
  ldr r4, =_ebss
 80024ac:	20000484 	.word	0x20000484

080024b0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80024b0:	e7fe      	b.n	80024b0 <ADC1_2_IRQHandler>
	...

080024b4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80024b8:	4b08      	ldr	r3, [pc, #32]	; (80024dc <HAL_Init+0x28>)
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	4a07      	ldr	r2, [pc, #28]	; (80024dc <HAL_Init+0x28>)
 80024be:	f043 0310 	orr.w	r3, r3, #16
 80024c2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80024c4:	2003      	movs	r0, #3
 80024c6:	f000 f939 	bl	800273c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80024ca:	200f      	movs	r0, #15
 80024cc:	f000 f808 	bl	80024e0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80024d0:	f7ff fee8 	bl	80022a4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80024d4:	2300      	movs	r3, #0
}
 80024d6:	4618      	mov	r0, r3
 80024d8:	bd80      	pop	{r7, pc}
 80024da:	bf00      	nop
 80024dc:	40022000 	.word	0x40022000

080024e0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b082      	sub	sp, #8
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80024e8:	4b12      	ldr	r3, [pc, #72]	; (8002534 <HAL_InitTick+0x54>)
 80024ea:	681a      	ldr	r2, [r3, #0]
 80024ec:	4b12      	ldr	r3, [pc, #72]	; (8002538 <HAL_InitTick+0x58>)
 80024ee:	781b      	ldrb	r3, [r3, #0]
 80024f0:	4619      	mov	r1, r3
 80024f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80024f6:	fbb3 f3f1 	udiv	r3, r3, r1
 80024fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80024fe:	4618      	mov	r0, r3
 8002500:	f000 f955 	bl	80027ae <HAL_SYSTICK_Config>
 8002504:	4603      	mov	r3, r0
 8002506:	2b00      	cmp	r3, #0
 8002508:	d001      	beq.n	800250e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800250a:	2301      	movs	r3, #1
 800250c:	e00e      	b.n	800252c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	2b0f      	cmp	r3, #15
 8002512:	d80a      	bhi.n	800252a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002514:	2200      	movs	r2, #0
 8002516:	6879      	ldr	r1, [r7, #4]
 8002518:	f04f 30ff 	mov.w	r0, #4294967295
 800251c:	f000 f919 	bl	8002752 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002520:	4a06      	ldr	r2, [pc, #24]	; (800253c <HAL_InitTick+0x5c>)
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002526:	2300      	movs	r3, #0
 8002528:	e000      	b.n	800252c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800252a:	2301      	movs	r3, #1
}
 800252c:	4618      	mov	r0, r3
 800252e:	3708      	adds	r7, #8
 8002530:	46bd      	mov	sp, r7
 8002532:	bd80      	pop	{r7, pc}
 8002534:	20000400 	.word	0x20000400
 8002538:	20000408 	.word	0x20000408
 800253c:	20000404 	.word	0x20000404

08002540 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002540:	b480      	push	{r7}
 8002542:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002544:	4b05      	ldr	r3, [pc, #20]	; (800255c <HAL_IncTick+0x1c>)
 8002546:	781b      	ldrb	r3, [r3, #0]
 8002548:	461a      	mov	r2, r3
 800254a:	4b05      	ldr	r3, [pc, #20]	; (8002560 <HAL_IncTick+0x20>)
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	4413      	add	r3, r2
 8002550:	4a03      	ldr	r2, [pc, #12]	; (8002560 <HAL_IncTick+0x20>)
 8002552:	6013      	str	r3, [r2, #0]
}
 8002554:	bf00      	nop
 8002556:	46bd      	mov	sp, r7
 8002558:	bc80      	pop	{r7}
 800255a:	4770      	bx	lr
 800255c:	20000408 	.word	0x20000408
 8002560:	2000047c 	.word	0x2000047c

08002564 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002564:	b480      	push	{r7}
 8002566:	af00      	add	r7, sp, #0
  return uwTick;
 8002568:	4b02      	ldr	r3, [pc, #8]	; (8002574 <HAL_GetTick+0x10>)
 800256a:	681b      	ldr	r3, [r3, #0]
}
 800256c:	4618      	mov	r0, r3
 800256e:	46bd      	mov	sp, r7
 8002570:	bc80      	pop	{r7}
 8002572:	4770      	bx	lr
 8002574:	2000047c 	.word	0x2000047c

08002578 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002578:	b480      	push	{r7}
 800257a:	b085      	sub	sp, #20
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	f003 0307 	and.w	r3, r3, #7
 8002586:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002588:	4b0c      	ldr	r3, [pc, #48]	; (80025bc <__NVIC_SetPriorityGrouping+0x44>)
 800258a:	68db      	ldr	r3, [r3, #12]
 800258c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800258e:	68ba      	ldr	r2, [r7, #8]
 8002590:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002594:	4013      	ands	r3, r2
 8002596:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800259c:	68bb      	ldr	r3, [r7, #8]
 800259e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80025a0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80025a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80025a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80025aa:	4a04      	ldr	r2, [pc, #16]	; (80025bc <__NVIC_SetPriorityGrouping+0x44>)
 80025ac:	68bb      	ldr	r3, [r7, #8]
 80025ae:	60d3      	str	r3, [r2, #12]
}
 80025b0:	bf00      	nop
 80025b2:	3714      	adds	r7, #20
 80025b4:	46bd      	mov	sp, r7
 80025b6:	bc80      	pop	{r7}
 80025b8:	4770      	bx	lr
 80025ba:	bf00      	nop
 80025bc:	e000ed00 	.word	0xe000ed00

080025c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80025c0:	b480      	push	{r7}
 80025c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80025c4:	4b04      	ldr	r3, [pc, #16]	; (80025d8 <__NVIC_GetPriorityGrouping+0x18>)
 80025c6:	68db      	ldr	r3, [r3, #12]
 80025c8:	0a1b      	lsrs	r3, r3, #8
 80025ca:	f003 0307 	and.w	r3, r3, #7
}
 80025ce:	4618      	mov	r0, r3
 80025d0:	46bd      	mov	sp, r7
 80025d2:	bc80      	pop	{r7}
 80025d4:	4770      	bx	lr
 80025d6:	bf00      	nop
 80025d8:	e000ed00 	.word	0xe000ed00

080025dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025dc:	b480      	push	{r7}
 80025de:	b083      	sub	sp, #12
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	4603      	mov	r3, r0
 80025e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	db0b      	blt.n	8002606 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80025ee:	79fb      	ldrb	r3, [r7, #7]
 80025f0:	f003 021f 	and.w	r2, r3, #31
 80025f4:	4906      	ldr	r1, [pc, #24]	; (8002610 <__NVIC_EnableIRQ+0x34>)
 80025f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025fa:	095b      	lsrs	r3, r3, #5
 80025fc:	2001      	movs	r0, #1
 80025fe:	fa00 f202 	lsl.w	r2, r0, r2
 8002602:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002606:	bf00      	nop
 8002608:	370c      	adds	r7, #12
 800260a:	46bd      	mov	sp, r7
 800260c:	bc80      	pop	{r7}
 800260e:	4770      	bx	lr
 8002610:	e000e100 	.word	0xe000e100

08002614 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002614:	b480      	push	{r7}
 8002616:	b083      	sub	sp, #12
 8002618:	af00      	add	r7, sp, #0
 800261a:	4603      	mov	r3, r0
 800261c:	6039      	str	r1, [r7, #0]
 800261e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002620:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002624:	2b00      	cmp	r3, #0
 8002626:	db0a      	blt.n	800263e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002628:	683b      	ldr	r3, [r7, #0]
 800262a:	b2da      	uxtb	r2, r3
 800262c:	490c      	ldr	r1, [pc, #48]	; (8002660 <__NVIC_SetPriority+0x4c>)
 800262e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002632:	0112      	lsls	r2, r2, #4
 8002634:	b2d2      	uxtb	r2, r2
 8002636:	440b      	add	r3, r1
 8002638:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800263c:	e00a      	b.n	8002654 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800263e:	683b      	ldr	r3, [r7, #0]
 8002640:	b2da      	uxtb	r2, r3
 8002642:	4908      	ldr	r1, [pc, #32]	; (8002664 <__NVIC_SetPriority+0x50>)
 8002644:	79fb      	ldrb	r3, [r7, #7]
 8002646:	f003 030f 	and.w	r3, r3, #15
 800264a:	3b04      	subs	r3, #4
 800264c:	0112      	lsls	r2, r2, #4
 800264e:	b2d2      	uxtb	r2, r2
 8002650:	440b      	add	r3, r1
 8002652:	761a      	strb	r2, [r3, #24]
}
 8002654:	bf00      	nop
 8002656:	370c      	adds	r7, #12
 8002658:	46bd      	mov	sp, r7
 800265a:	bc80      	pop	{r7}
 800265c:	4770      	bx	lr
 800265e:	bf00      	nop
 8002660:	e000e100 	.word	0xe000e100
 8002664:	e000ed00 	.word	0xe000ed00

08002668 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002668:	b480      	push	{r7}
 800266a:	b089      	sub	sp, #36	; 0x24
 800266c:	af00      	add	r7, sp, #0
 800266e:	60f8      	str	r0, [r7, #12]
 8002670:	60b9      	str	r1, [r7, #8]
 8002672:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	f003 0307 	and.w	r3, r3, #7
 800267a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800267c:	69fb      	ldr	r3, [r7, #28]
 800267e:	f1c3 0307 	rsb	r3, r3, #7
 8002682:	2b04      	cmp	r3, #4
 8002684:	bf28      	it	cs
 8002686:	2304      	movcs	r3, #4
 8002688:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800268a:	69fb      	ldr	r3, [r7, #28]
 800268c:	3304      	adds	r3, #4
 800268e:	2b06      	cmp	r3, #6
 8002690:	d902      	bls.n	8002698 <NVIC_EncodePriority+0x30>
 8002692:	69fb      	ldr	r3, [r7, #28]
 8002694:	3b03      	subs	r3, #3
 8002696:	e000      	b.n	800269a <NVIC_EncodePriority+0x32>
 8002698:	2300      	movs	r3, #0
 800269a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800269c:	f04f 32ff 	mov.w	r2, #4294967295
 80026a0:	69bb      	ldr	r3, [r7, #24]
 80026a2:	fa02 f303 	lsl.w	r3, r2, r3
 80026a6:	43da      	mvns	r2, r3
 80026a8:	68bb      	ldr	r3, [r7, #8]
 80026aa:	401a      	ands	r2, r3
 80026ac:	697b      	ldr	r3, [r7, #20]
 80026ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80026b0:	f04f 31ff 	mov.w	r1, #4294967295
 80026b4:	697b      	ldr	r3, [r7, #20]
 80026b6:	fa01 f303 	lsl.w	r3, r1, r3
 80026ba:	43d9      	mvns	r1, r3
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026c0:	4313      	orrs	r3, r2
         );
}
 80026c2:	4618      	mov	r0, r3
 80026c4:	3724      	adds	r7, #36	; 0x24
 80026c6:	46bd      	mov	sp, r7
 80026c8:	bc80      	pop	{r7}
 80026ca:	4770      	bx	lr

080026cc <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80026cc:	b480      	push	{r7}
 80026ce:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80026d0:	f3bf 8f4f 	dsb	sy
}
 80026d4:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80026d6:	4b06      	ldr	r3, [pc, #24]	; (80026f0 <__NVIC_SystemReset+0x24>)
 80026d8:	68db      	ldr	r3, [r3, #12]
 80026da:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80026de:	4904      	ldr	r1, [pc, #16]	; (80026f0 <__NVIC_SystemReset+0x24>)
 80026e0:	4b04      	ldr	r3, [pc, #16]	; (80026f4 <__NVIC_SystemReset+0x28>)
 80026e2:	4313      	orrs	r3, r2
 80026e4:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80026e6:	f3bf 8f4f 	dsb	sy
}
 80026ea:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80026ec:	bf00      	nop
 80026ee:	e7fd      	b.n	80026ec <__NVIC_SystemReset+0x20>
 80026f0:	e000ed00 	.word	0xe000ed00
 80026f4:	05fa0004 	.word	0x05fa0004

080026f8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b082      	sub	sp, #8
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	3b01      	subs	r3, #1
 8002704:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002708:	d301      	bcc.n	800270e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800270a:	2301      	movs	r3, #1
 800270c:	e00f      	b.n	800272e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800270e:	4a0a      	ldr	r2, [pc, #40]	; (8002738 <SysTick_Config+0x40>)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	3b01      	subs	r3, #1
 8002714:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002716:	210f      	movs	r1, #15
 8002718:	f04f 30ff 	mov.w	r0, #4294967295
 800271c:	f7ff ff7a 	bl	8002614 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002720:	4b05      	ldr	r3, [pc, #20]	; (8002738 <SysTick_Config+0x40>)
 8002722:	2200      	movs	r2, #0
 8002724:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002726:	4b04      	ldr	r3, [pc, #16]	; (8002738 <SysTick_Config+0x40>)
 8002728:	2207      	movs	r2, #7
 800272a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800272c:	2300      	movs	r3, #0
}
 800272e:	4618      	mov	r0, r3
 8002730:	3708      	adds	r7, #8
 8002732:	46bd      	mov	sp, r7
 8002734:	bd80      	pop	{r7, pc}
 8002736:	bf00      	nop
 8002738:	e000e010 	.word	0xe000e010

0800273c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800273c:	b580      	push	{r7, lr}
 800273e:	b082      	sub	sp, #8
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002744:	6878      	ldr	r0, [r7, #4]
 8002746:	f7ff ff17 	bl	8002578 <__NVIC_SetPriorityGrouping>
}
 800274a:	bf00      	nop
 800274c:	3708      	adds	r7, #8
 800274e:	46bd      	mov	sp, r7
 8002750:	bd80      	pop	{r7, pc}

08002752 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002752:	b580      	push	{r7, lr}
 8002754:	b086      	sub	sp, #24
 8002756:	af00      	add	r7, sp, #0
 8002758:	4603      	mov	r3, r0
 800275a:	60b9      	str	r1, [r7, #8]
 800275c:	607a      	str	r2, [r7, #4]
 800275e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002760:	2300      	movs	r3, #0
 8002762:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002764:	f7ff ff2c 	bl	80025c0 <__NVIC_GetPriorityGrouping>
 8002768:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800276a:	687a      	ldr	r2, [r7, #4]
 800276c:	68b9      	ldr	r1, [r7, #8]
 800276e:	6978      	ldr	r0, [r7, #20]
 8002770:	f7ff ff7a 	bl	8002668 <NVIC_EncodePriority>
 8002774:	4602      	mov	r2, r0
 8002776:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800277a:	4611      	mov	r1, r2
 800277c:	4618      	mov	r0, r3
 800277e:	f7ff ff49 	bl	8002614 <__NVIC_SetPriority>
}
 8002782:	bf00      	nop
 8002784:	3718      	adds	r7, #24
 8002786:	46bd      	mov	sp, r7
 8002788:	bd80      	pop	{r7, pc}

0800278a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800278a:	b580      	push	{r7, lr}
 800278c:	b082      	sub	sp, #8
 800278e:	af00      	add	r7, sp, #0
 8002790:	4603      	mov	r3, r0
 8002792:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002794:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002798:	4618      	mov	r0, r3
 800279a:	f7ff ff1f 	bl	80025dc <__NVIC_EnableIRQ>
}
 800279e:	bf00      	nop
 80027a0:	3708      	adds	r7, #8
 80027a2:	46bd      	mov	sp, r7
 80027a4:	bd80      	pop	{r7, pc}

080027a6 <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 80027a6:	b580      	push	{r7, lr}
 80027a8:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 80027aa:	f7ff ff8f 	bl	80026cc <__NVIC_SystemReset>

080027ae <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80027ae:	b580      	push	{r7, lr}
 80027b0:	b082      	sub	sp, #8
 80027b2:	af00      	add	r7, sp, #0
 80027b4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80027b6:	6878      	ldr	r0, [r7, #4]
 80027b8:	f7ff ff9e 	bl	80026f8 <SysTick_Config>
 80027bc:	4603      	mov	r3, r0
}
 80027be:	4618      	mov	r0, r3
 80027c0:	3708      	adds	r7, #8
 80027c2:	46bd      	mov	sp, r7
 80027c4:	bd80      	pop	{r7, pc}

080027c6 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 80027c6:	b580      	push	{r7, lr}
 80027c8:	b084      	sub	sp, #16
 80027ca:	af00      	add	r7, sp, #0
 80027cc:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d101      	bne.n	80027d8 <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 80027d4:	2301      	movs	r3, #1
 80027d6:	e034      	b.n	8002842 <HAL_IWDG_Init+0x7c>
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 80027e0:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR and IWDG_RLR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f245 5255 	movw	r2, #21845	; 0x5555
 80027ea:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	687a      	ldr	r2, [r7, #4]
 80027f2:	6852      	ldr	r2, [r2, #4]
 80027f4:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	687a      	ldr	r2, [r7, #4]
 80027fc:	6892      	ldr	r2, [r2, #8]
 80027fe:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8002800:	f7ff feb0 	bl	8002564 <HAL_GetTick>
 8002804:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8002806:	e00f      	b.n	8002828 <HAL_IWDG_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8002808:	f7ff feac 	bl	8002564 <HAL_GetTick>
 800280c:	4602      	mov	r2, r0
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	1ad3      	subs	r3, r2, r3
 8002812:	2b27      	cmp	r3, #39	; 0x27
 8002814:	d908      	bls.n	8002828 <HAL_IWDG_Init+0x62>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	68db      	ldr	r3, [r3, #12]
 800281c:	f003 0303 	and.w	r3, r3, #3
 8002820:	2b00      	cmp	r3, #0
 8002822:	d001      	beq.n	8002828 <HAL_IWDG_Init+0x62>
      {
        return HAL_TIMEOUT;
 8002824:	2303      	movs	r3, #3
 8002826:	e00c      	b.n	8002842 <HAL_IWDG_Init+0x7c>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	68db      	ldr	r3, [r3, #12]
 800282e:	f003 0303 	and.w	r3, r3, #3
 8002832:	2b00      	cmp	r3, #0
 8002834:	d1e8      	bne.n	8002808 <HAL_IWDG_Init+0x42>
      }
    }
  }

  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 800283e:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8002840:	2300      	movs	r3, #0
}
 8002842:	4618      	mov	r0, r3
 8002844:	3710      	adds	r7, #16
 8002846:	46bd      	mov	sp, r7
 8002848:	bd80      	pop	{r7, pc}

0800284a <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 800284a:	b480      	push	{r7}
 800284c:	b083      	sub	sp, #12
 800284e:	af00      	add	r7, sp, #0
 8002850:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 800285a:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800285c:	2300      	movs	r3, #0
}
 800285e:	4618      	mov	r0, r3
 8002860:	370c      	adds	r7, #12
 8002862:	46bd      	mov	sp, r7
 8002864:	bc80      	pop	{r7}
 8002866:	4770      	bx	lr

08002868 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002868:	b580      	push	{r7, lr}
 800286a:	b086      	sub	sp, #24
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	2b00      	cmp	r3, #0
 8002874:	d101      	bne.n	800287a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002876:	2301      	movs	r3, #1
 8002878:	e272      	b.n	8002d60 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f003 0301 	and.w	r3, r3, #1
 8002882:	2b00      	cmp	r3, #0
 8002884:	f000 8087 	beq.w	8002996 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002888:	4b92      	ldr	r3, [pc, #584]	; (8002ad4 <HAL_RCC_OscConfig+0x26c>)
 800288a:	685b      	ldr	r3, [r3, #4]
 800288c:	f003 030c 	and.w	r3, r3, #12
 8002890:	2b04      	cmp	r3, #4
 8002892:	d00c      	beq.n	80028ae <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002894:	4b8f      	ldr	r3, [pc, #572]	; (8002ad4 <HAL_RCC_OscConfig+0x26c>)
 8002896:	685b      	ldr	r3, [r3, #4]
 8002898:	f003 030c 	and.w	r3, r3, #12
 800289c:	2b08      	cmp	r3, #8
 800289e:	d112      	bne.n	80028c6 <HAL_RCC_OscConfig+0x5e>
 80028a0:	4b8c      	ldr	r3, [pc, #560]	; (8002ad4 <HAL_RCC_OscConfig+0x26c>)
 80028a2:	685b      	ldr	r3, [r3, #4]
 80028a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80028ac:	d10b      	bne.n	80028c6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028ae:	4b89      	ldr	r3, [pc, #548]	; (8002ad4 <HAL_RCC_OscConfig+0x26c>)
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d06c      	beq.n	8002994 <HAL_RCC_OscConfig+0x12c>
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	685b      	ldr	r3, [r3, #4]
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d168      	bne.n	8002994 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80028c2:	2301      	movs	r3, #1
 80028c4:	e24c      	b.n	8002d60 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	685b      	ldr	r3, [r3, #4]
 80028ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80028ce:	d106      	bne.n	80028de <HAL_RCC_OscConfig+0x76>
 80028d0:	4b80      	ldr	r3, [pc, #512]	; (8002ad4 <HAL_RCC_OscConfig+0x26c>)
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	4a7f      	ldr	r2, [pc, #508]	; (8002ad4 <HAL_RCC_OscConfig+0x26c>)
 80028d6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028da:	6013      	str	r3, [r2, #0]
 80028dc:	e02e      	b.n	800293c <HAL_RCC_OscConfig+0xd4>
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	685b      	ldr	r3, [r3, #4]
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d10c      	bne.n	8002900 <HAL_RCC_OscConfig+0x98>
 80028e6:	4b7b      	ldr	r3, [pc, #492]	; (8002ad4 <HAL_RCC_OscConfig+0x26c>)
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	4a7a      	ldr	r2, [pc, #488]	; (8002ad4 <HAL_RCC_OscConfig+0x26c>)
 80028ec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80028f0:	6013      	str	r3, [r2, #0]
 80028f2:	4b78      	ldr	r3, [pc, #480]	; (8002ad4 <HAL_RCC_OscConfig+0x26c>)
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	4a77      	ldr	r2, [pc, #476]	; (8002ad4 <HAL_RCC_OscConfig+0x26c>)
 80028f8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80028fc:	6013      	str	r3, [r2, #0]
 80028fe:	e01d      	b.n	800293c <HAL_RCC_OscConfig+0xd4>
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	685b      	ldr	r3, [r3, #4]
 8002904:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002908:	d10c      	bne.n	8002924 <HAL_RCC_OscConfig+0xbc>
 800290a:	4b72      	ldr	r3, [pc, #456]	; (8002ad4 <HAL_RCC_OscConfig+0x26c>)
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	4a71      	ldr	r2, [pc, #452]	; (8002ad4 <HAL_RCC_OscConfig+0x26c>)
 8002910:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002914:	6013      	str	r3, [r2, #0]
 8002916:	4b6f      	ldr	r3, [pc, #444]	; (8002ad4 <HAL_RCC_OscConfig+0x26c>)
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	4a6e      	ldr	r2, [pc, #440]	; (8002ad4 <HAL_RCC_OscConfig+0x26c>)
 800291c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002920:	6013      	str	r3, [r2, #0]
 8002922:	e00b      	b.n	800293c <HAL_RCC_OscConfig+0xd4>
 8002924:	4b6b      	ldr	r3, [pc, #428]	; (8002ad4 <HAL_RCC_OscConfig+0x26c>)
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	4a6a      	ldr	r2, [pc, #424]	; (8002ad4 <HAL_RCC_OscConfig+0x26c>)
 800292a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800292e:	6013      	str	r3, [r2, #0]
 8002930:	4b68      	ldr	r3, [pc, #416]	; (8002ad4 <HAL_RCC_OscConfig+0x26c>)
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	4a67      	ldr	r2, [pc, #412]	; (8002ad4 <HAL_RCC_OscConfig+0x26c>)
 8002936:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800293a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	685b      	ldr	r3, [r3, #4]
 8002940:	2b00      	cmp	r3, #0
 8002942:	d013      	beq.n	800296c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002944:	f7ff fe0e 	bl	8002564 <HAL_GetTick>
 8002948:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800294a:	e008      	b.n	800295e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800294c:	f7ff fe0a 	bl	8002564 <HAL_GetTick>
 8002950:	4602      	mov	r2, r0
 8002952:	693b      	ldr	r3, [r7, #16]
 8002954:	1ad3      	subs	r3, r2, r3
 8002956:	2b64      	cmp	r3, #100	; 0x64
 8002958:	d901      	bls.n	800295e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800295a:	2303      	movs	r3, #3
 800295c:	e200      	b.n	8002d60 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800295e:	4b5d      	ldr	r3, [pc, #372]	; (8002ad4 <HAL_RCC_OscConfig+0x26c>)
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002966:	2b00      	cmp	r3, #0
 8002968:	d0f0      	beq.n	800294c <HAL_RCC_OscConfig+0xe4>
 800296a:	e014      	b.n	8002996 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800296c:	f7ff fdfa 	bl	8002564 <HAL_GetTick>
 8002970:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002972:	e008      	b.n	8002986 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002974:	f7ff fdf6 	bl	8002564 <HAL_GetTick>
 8002978:	4602      	mov	r2, r0
 800297a:	693b      	ldr	r3, [r7, #16]
 800297c:	1ad3      	subs	r3, r2, r3
 800297e:	2b64      	cmp	r3, #100	; 0x64
 8002980:	d901      	bls.n	8002986 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002982:	2303      	movs	r3, #3
 8002984:	e1ec      	b.n	8002d60 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002986:	4b53      	ldr	r3, [pc, #332]	; (8002ad4 <HAL_RCC_OscConfig+0x26c>)
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800298e:	2b00      	cmp	r3, #0
 8002990:	d1f0      	bne.n	8002974 <HAL_RCC_OscConfig+0x10c>
 8002992:	e000      	b.n	8002996 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002994:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f003 0302 	and.w	r3, r3, #2
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d063      	beq.n	8002a6a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80029a2:	4b4c      	ldr	r3, [pc, #304]	; (8002ad4 <HAL_RCC_OscConfig+0x26c>)
 80029a4:	685b      	ldr	r3, [r3, #4]
 80029a6:	f003 030c 	and.w	r3, r3, #12
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d00b      	beq.n	80029c6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80029ae:	4b49      	ldr	r3, [pc, #292]	; (8002ad4 <HAL_RCC_OscConfig+0x26c>)
 80029b0:	685b      	ldr	r3, [r3, #4]
 80029b2:	f003 030c 	and.w	r3, r3, #12
 80029b6:	2b08      	cmp	r3, #8
 80029b8:	d11c      	bne.n	80029f4 <HAL_RCC_OscConfig+0x18c>
 80029ba:	4b46      	ldr	r3, [pc, #280]	; (8002ad4 <HAL_RCC_OscConfig+0x26c>)
 80029bc:	685b      	ldr	r3, [r3, #4]
 80029be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d116      	bne.n	80029f4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80029c6:	4b43      	ldr	r3, [pc, #268]	; (8002ad4 <HAL_RCC_OscConfig+0x26c>)
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f003 0302 	and.w	r3, r3, #2
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d005      	beq.n	80029de <HAL_RCC_OscConfig+0x176>
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	691b      	ldr	r3, [r3, #16]
 80029d6:	2b01      	cmp	r3, #1
 80029d8:	d001      	beq.n	80029de <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80029da:	2301      	movs	r3, #1
 80029dc:	e1c0      	b.n	8002d60 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029de:	4b3d      	ldr	r3, [pc, #244]	; (8002ad4 <HAL_RCC_OscConfig+0x26c>)
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	695b      	ldr	r3, [r3, #20]
 80029ea:	00db      	lsls	r3, r3, #3
 80029ec:	4939      	ldr	r1, [pc, #228]	; (8002ad4 <HAL_RCC_OscConfig+0x26c>)
 80029ee:	4313      	orrs	r3, r2
 80029f0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80029f2:	e03a      	b.n	8002a6a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	691b      	ldr	r3, [r3, #16]
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d020      	beq.n	8002a3e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80029fc:	4b36      	ldr	r3, [pc, #216]	; (8002ad8 <HAL_RCC_OscConfig+0x270>)
 80029fe:	2201      	movs	r2, #1
 8002a00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a02:	f7ff fdaf 	bl	8002564 <HAL_GetTick>
 8002a06:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a08:	e008      	b.n	8002a1c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a0a:	f7ff fdab 	bl	8002564 <HAL_GetTick>
 8002a0e:	4602      	mov	r2, r0
 8002a10:	693b      	ldr	r3, [r7, #16]
 8002a12:	1ad3      	subs	r3, r2, r3
 8002a14:	2b02      	cmp	r3, #2
 8002a16:	d901      	bls.n	8002a1c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002a18:	2303      	movs	r3, #3
 8002a1a:	e1a1      	b.n	8002d60 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a1c:	4b2d      	ldr	r3, [pc, #180]	; (8002ad4 <HAL_RCC_OscConfig+0x26c>)
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f003 0302 	and.w	r3, r3, #2
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d0f0      	beq.n	8002a0a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a28:	4b2a      	ldr	r3, [pc, #168]	; (8002ad4 <HAL_RCC_OscConfig+0x26c>)
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	695b      	ldr	r3, [r3, #20]
 8002a34:	00db      	lsls	r3, r3, #3
 8002a36:	4927      	ldr	r1, [pc, #156]	; (8002ad4 <HAL_RCC_OscConfig+0x26c>)
 8002a38:	4313      	orrs	r3, r2
 8002a3a:	600b      	str	r3, [r1, #0]
 8002a3c:	e015      	b.n	8002a6a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a3e:	4b26      	ldr	r3, [pc, #152]	; (8002ad8 <HAL_RCC_OscConfig+0x270>)
 8002a40:	2200      	movs	r2, #0
 8002a42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a44:	f7ff fd8e 	bl	8002564 <HAL_GetTick>
 8002a48:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a4a:	e008      	b.n	8002a5e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a4c:	f7ff fd8a 	bl	8002564 <HAL_GetTick>
 8002a50:	4602      	mov	r2, r0
 8002a52:	693b      	ldr	r3, [r7, #16]
 8002a54:	1ad3      	subs	r3, r2, r3
 8002a56:	2b02      	cmp	r3, #2
 8002a58:	d901      	bls.n	8002a5e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002a5a:	2303      	movs	r3, #3
 8002a5c:	e180      	b.n	8002d60 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a5e:	4b1d      	ldr	r3, [pc, #116]	; (8002ad4 <HAL_RCC_OscConfig+0x26c>)
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f003 0302 	and.w	r3, r3, #2
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d1f0      	bne.n	8002a4c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f003 0308 	and.w	r3, r3, #8
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d03a      	beq.n	8002aec <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	699b      	ldr	r3, [r3, #24]
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d019      	beq.n	8002ab2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a7e:	4b17      	ldr	r3, [pc, #92]	; (8002adc <HAL_RCC_OscConfig+0x274>)
 8002a80:	2201      	movs	r2, #1
 8002a82:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a84:	f7ff fd6e 	bl	8002564 <HAL_GetTick>
 8002a88:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a8a:	e008      	b.n	8002a9e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a8c:	f7ff fd6a 	bl	8002564 <HAL_GetTick>
 8002a90:	4602      	mov	r2, r0
 8002a92:	693b      	ldr	r3, [r7, #16]
 8002a94:	1ad3      	subs	r3, r2, r3
 8002a96:	2b02      	cmp	r3, #2
 8002a98:	d901      	bls.n	8002a9e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002a9a:	2303      	movs	r3, #3
 8002a9c:	e160      	b.n	8002d60 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a9e:	4b0d      	ldr	r3, [pc, #52]	; (8002ad4 <HAL_RCC_OscConfig+0x26c>)
 8002aa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aa2:	f003 0302 	and.w	r3, r3, #2
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d0f0      	beq.n	8002a8c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002aaa:	2001      	movs	r0, #1
 8002aac:	f000 fa9c 	bl	8002fe8 <RCC_Delay>
 8002ab0:	e01c      	b.n	8002aec <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ab2:	4b0a      	ldr	r3, [pc, #40]	; (8002adc <HAL_RCC_OscConfig+0x274>)
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ab8:	f7ff fd54 	bl	8002564 <HAL_GetTick>
 8002abc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002abe:	e00f      	b.n	8002ae0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ac0:	f7ff fd50 	bl	8002564 <HAL_GetTick>
 8002ac4:	4602      	mov	r2, r0
 8002ac6:	693b      	ldr	r3, [r7, #16]
 8002ac8:	1ad3      	subs	r3, r2, r3
 8002aca:	2b02      	cmp	r3, #2
 8002acc:	d908      	bls.n	8002ae0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002ace:	2303      	movs	r3, #3
 8002ad0:	e146      	b.n	8002d60 <HAL_RCC_OscConfig+0x4f8>
 8002ad2:	bf00      	nop
 8002ad4:	40021000 	.word	0x40021000
 8002ad8:	42420000 	.word	0x42420000
 8002adc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ae0:	4b92      	ldr	r3, [pc, #584]	; (8002d2c <HAL_RCC_OscConfig+0x4c4>)
 8002ae2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ae4:	f003 0302 	and.w	r3, r3, #2
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d1e9      	bne.n	8002ac0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f003 0304 	and.w	r3, r3, #4
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	f000 80a6 	beq.w	8002c46 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002afa:	2300      	movs	r3, #0
 8002afc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002afe:	4b8b      	ldr	r3, [pc, #556]	; (8002d2c <HAL_RCC_OscConfig+0x4c4>)
 8002b00:	69db      	ldr	r3, [r3, #28]
 8002b02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d10d      	bne.n	8002b26 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b0a:	4b88      	ldr	r3, [pc, #544]	; (8002d2c <HAL_RCC_OscConfig+0x4c4>)
 8002b0c:	69db      	ldr	r3, [r3, #28]
 8002b0e:	4a87      	ldr	r2, [pc, #540]	; (8002d2c <HAL_RCC_OscConfig+0x4c4>)
 8002b10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b14:	61d3      	str	r3, [r2, #28]
 8002b16:	4b85      	ldr	r3, [pc, #532]	; (8002d2c <HAL_RCC_OscConfig+0x4c4>)
 8002b18:	69db      	ldr	r3, [r3, #28]
 8002b1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b1e:	60bb      	str	r3, [r7, #8]
 8002b20:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b22:	2301      	movs	r3, #1
 8002b24:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b26:	4b82      	ldr	r3, [pc, #520]	; (8002d30 <HAL_RCC_OscConfig+0x4c8>)
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d118      	bne.n	8002b64 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002b32:	4b7f      	ldr	r3, [pc, #508]	; (8002d30 <HAL_RCC_OscConfig+0x4c8>)
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	4a7e      	ldr	r2, [pc, #504]	; (8002d30 <HAL_RCC_OscConfig+0x4c8>)
 8002b38:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b3c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b3e:	f7ff fd11 	bl	8002564 <HAL_GetTick>
 8002b42:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b44:	e008      	b.n	8002b58 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b46:	f7ff fd0d 	bl	8002564 <HAL_GetTick>
 8002b4a:	4602      	mov	r2, r0
 8002b4c:	693b      	ldr	r3, [r7, #16]
 8002b4e:	1ad3      	subs	r3, r2, r3
 8002b50:	2b64      	cmp	r3, #100	; 0x64
 8002b52:	d901      	bls.n	8002b58 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002b54:	2303      	movs	r3, #3
 8002b56:	e103      	b.n	8002d60 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b58:	4b75      	ldr	r3, [pc, #468]	; (8002d30 <HAL_RCC_OscConfig+0x4c8>)
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d0f0      	beq.n	8002b46 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	68db      	ldr	r3, [r3, #12]
 8002b68:	2b01      	cmp	r3, #1
 8002b6a:	d106      	bne.n	8002b7a <HAL_RCC_OscConfig+0x312>
 8002b6c:	4b6f      	ldr	r3, [pc, #444]	; (8002d2c <HAL_RCC_OscConfig+0x4c4>)
 8002b6e:	6a1b      	ldr	r3, [r3, #32]
 8002b70:	4a6e      	ldr	r2, [pc, #440]	; (8002d2c <HAL_RCC_OscConfig+0x4c4>)
 8002b72:	f043 0301 	orr.w	r3, r3, #1
 8002b76:	6213      	str	r3, [r2, #32]
 8002b78:	e02d      	b.n	8002bd6 <HAL_RCC_OscConfig+0x36e>
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	68db      	ldr	r3, [r3, #12]
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d10c      	bne.n	8002b9c <HAL_RCC_OscConfig+0x334>
 8002b82:	4b6a      	ldr	r3, [pc, #424]	; (8002d2c <HAL_RCC_OscConfig+0x4c4>)
 8002b84:	6a1b      	ldr	r3, [r3, #32]
 8002b86:	4a69      	ldr	r2, [pc, #420]	; (8002d2c <HAL_RCC_OscConfig+0x4c4>)
 8002b88:	f023 0301 	bic.w	r3, r3, #1
 8002b8c:	6213      	str	r3, [r2, #32]
 8002b8e:	4b67      	ldr	r3, [pc, #412]	; (8002d2c <HAL_RCC_OscConfig+0x4c4>)
 8002b90:	6a1b      	ldr	r3, [r3, #32]
 8002b92:	4a66      	ldr	r2, [pc, #408]	; (8002d2c <HAL_RCC_OscConfig+0x4c4>)
 8002b94:	f023 0304 	bic.w	r3, r3, #4
 8002b98:	6213      	str	r3, [r2, #32]
 8002b9a:	e01c      	b.n	8002bd6 <HAL_RCC_OscConfig+0x36e>
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	68db      	ldr	r3, [r3, #12]
 8002ba0:	2b05      	cmp	r3, #5
 8002ba2:	d10c      	bne.n	8002bbe <HAL_RCC_OscConfig+0x356>
 8002ba4:	4b61      	ldr	r3, [pc, #388]	; (8002d2c <HAL_RCC_OscConfig+0x4c4>)
 8002ba6:	6a1b      	ldr	r3, [r3, #32]
 8002ba8:	4a60      	ldr	r2, [pc, #384]	; (8002d2c <HAL_RCC_OscConfig+0x4c4>)
 8002baa:	f043 0304 	orr.w	r3, r3, #4
 8002bae:	6213      	str	r3, [r2, #32]
 8002bb0:	4b5e      	ldr	r3, [pc, #376]	; (8002d2c <HAL_RCC_OscConfig+0x4c4>)
 8002bb2:	6a1b      	ldr	r3, [r3, #32]
 8002bb4:	4a5d      	ldr	r2, [pc, #372]	; (8002d2c <HAL_RCC_OscConfig+0x4c4>)
 8002bb6:	f043 0301 	orr.w	r3, r3, #1
 8002bba:	6213      	str	r3, [r2, #32]
 8002bbc:	e00b      	b.n	8002bd6 <HAL_RCC_OscConfig+0x36e>
 8002bbe:	4b5b      	ldr	r3, [pc, #364]	; (8002d2c <HAL_RCC_OscConfig+0x4c4>)
 8002bc0:	6a1b      	ldr	r3, [r3, #32]
 8002bc2:	4a5a      	ldr	r2, [pc, #360]	; (8002d2c <HAL_RCC_OscConfig+0x4c4>)
 8002bc4:	f023 0301 	bic.w	r3, r3, #1
 8002bc8:	6213      	str	r3, [r2, #32]
 8002bca:	4b58      	ldr	r3, [pc, #352]	; (8002d2c <HAL_RCC_OscConfig+0x4c4>)
 8002bcc:	6a1b      	ldr	r3, [r3, #32]
 8002bce:	4a57      	ldr	r2, [pc, #348]	; (8002d2c <HAL_RCC_OscConfig+0x4c4>)
 8002bd0:	f023 0304 	bic.w	r3, r3, #4
 8002bd4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	68db      	ldr	r3, [r3, #12]
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d015      	beq.n	8002c0a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002bde:	f7ff fcc1 	bl	8002564 <HAL_GetTick>
 8002be2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002be4:	e00a      	b.n	8002bfc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002be6:	f7ff fcbd 	bl	8002564 <HAL_GetTick>
 8002bea:	4602      	mov	r2, r0
 8002bec:	693b      	ldr	r3, [r7, #16]
 8002bee:	1ad3      	subs	r3, r2, r3
 8002bf0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bf4:	4293      	cmp	r3, r2
 8002bf6:	d901      	bls.n	8002bfc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002bf8:	2303      	movs	r3, #3
 8002bfa:	e0b1      	b.n	8002d60 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bfc:	4b4b      	ldr	r3, [pc, #300]	; (8002d2c <HAL_RCC_OscConfig+0x4c4>)
 8002bfe:	6a1b      	ldr	r3, [r3, #32]
 8002c00:	f003 0302 	and.w	r3, r3, #2
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d0ee      	beq.n	8002be6 <HAL_RCC_OscConfig+0x37e>
 8002c08:	e014      	b.n	8002c34 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c0a:	f7ff fcab 	bl	8002564 <HAL_GetTick>
 8002c0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c10:	e00a      	b.n	8002c28 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c12:	f7ff fca7 	bl	8002564 <HAL_GetTick>
 8002c16:	4602      	mov	r2, r0
 8002c18:	693b      	ldr	r3, [r7, #16]
 8002c1a:	1ad3      	subs	r3, r2, r3
 8002c1c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c20:	4293      	cmp	r3, r2
 8002c22:	d901      	bls.n	8002c28 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002c24:	2303      	movs	r3, #3
 8002c26:	e09b      	b.n	8002d60 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c28:	4b40      	ldr	r3, [pc, #256]	; (8002d2c <HAL_RCC_OscConfig+0x4c4>)
 8002c2a:	6a1b      	ldr	r3, [r3, #32]
 8002c2c:	f003 0302 	and.w	r3, r3, #2
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d1ee      	bne.n	8002c12 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002c34:	7dfb      	ldrb	r3, [r7, #23]
 8002c36:	2b01      	cmp	r3, #1
 8002c38:	d105      	bne.n	8002c46 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c3a:	4b3c      	ldr	r3, [pc, #240]	; (8002d2c <HAL_RCC_OscConfig+0x4c4>)
 8002c3c:	69db      	ldr	r3, [r3, #28]
 8002c3e:	4a3b      	ldr	r2, [pc, #236]	; (8002d2c <HAL_RCC_OscConfig+0x4c4>)
 8002c40:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c44:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	69db      	ldr	r3, [r3, #28]
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	f000 8087 	beq.w	8002d5e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002c50:	4b36      	ldr	r3, [pc, #216]	; (8002d2c <HAL_RCC_OscConfig+0x4c4>)
 8002c52:	685b      	ldr	r3, [r3, #4]
 8002c54:	f003 030c 	and.w	r3, r3, #12
 8002c58:	2b08      	cmp	r3, #8
 8002c5a:	d061      	beq.n	8002d20 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	69db      	ldr	r3, [r3, #28]
 8002c60:	2b02      	cmp	r3, #2
 8002c62:	d146      	bne.n	8002cf2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c64:	4b33      	ldr	r3, [pc, #204]	; (8002d34 <HAL_RCC_OscConfig+0x4cc>)
 8002c66:	2200      	movs	r2, #0
 8002c68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c6a:	f7ff fc7b 	bl	8002564 <HAL_GetTick>
 8002c6e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c70:	e008      	b.n	8002c84 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c72:	f7ff fc77 	bl	8002564 <HAL_GetTick>
 8002c76:	4602      	mov	r2, r0
 8002c78:	693b      	ldr	r3, [r7, #16]
 8002c7a:	1ad3      	subs	r3, r2, r3
 8002c7c:	2b02      	cmp	r3, #2
 8002c7e:	d901      	bls.n	8002c84 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002c80:	2303      	movs	r3, #3
 8002c82:	e06d      	b.n	8002d60 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c84:	4b29      	ldr	r3, [pc, #164]	; (8002d2c <HAL_RCC_OscConfig+0x4c4>)
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d1f0      	bne.n	8002c72 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	6a1b      	ldr	r3, [r3, #32]
 8002c94:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c98:	d108      	bne.n	8002cac <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002c9a:	4b24      	ldr	r3, [pc, #144]	; (8002d2c <HAL_RCC_OscConfig+0x4c4>)
 8002c9c:	685b      	ldr	r3, [r3, #4]
 8002c9e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	689b      	ldr	r3, [r3, #8]
 8002ca6:	4921      	ldr	r1, [pc, #132]	; (8002d2c <HAL_RCC_OscConfig+0x4c4>)
 8002ca8:	4313      	orrs	r3, r2
 8002caa:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002cac:	4b1f      	ldr	r3, [pc, #124]	; (8002d2c <HAL_RCC_OscConfig+0x4c4>)
 8002cae:	685b      	ldr	r3, [r3, #4]
 8002cb0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	6a19      	ldr	r1, [r3, #32]
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cbc:	430b      	orrs	r3, r1
 8002cbe:	491b      	ldr	r1, [pc, #108]	; (8002d2c <HAL_RCC_OscConfig+0x4c4>)
 8002cc0:	4313      	orrs	r3, r2
 8002cc2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002cc4:	4b1b      	ldr	r3, [pc, #108]	; (8002d34 <HAL_RCC_OscConfig+0x4cc>)
 8002cc6:	2201      	movs	r2, #1
 8002cc8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cca:	f7ff fc4b 	bl	8002564 <HAL_GetTick>
 8002cce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002cd0:	e008      	b.n	8002ce4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002cd2:	f7ff fc47 	bl	8002564 <HAL_GetTick>
 8002cd6:	4602      	mov	r2, r0
 8002cd8:	693b      	ldr	r3, [r7, #16]
 8002cda:	1ad3      	subs	r3, r2, r3
 8002cdc:	2b02      	cmp	r3, #2
 8002cde:	d901      	bls.n	8002ce4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002ce0:	2303      	movs	r3, #3
 8002ce2:	e03d      	b.n	8002d60 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002ce4:	4b11      	ldr	r3, [pc, #68]	; (8002d2c <HAL_RCC_OscConfig+0x4c4>)
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d0f0      	beq.n	8002cd2 <HAL_RCC_OscConfig+0x46a>
 8002cf0:	e035      	b.n	8002d5e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002cf2:	4b10      	ldr	r3, [pc, #64]	; (8002d34 <HAL_RCC_OscConfig+0x4cc>)
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cf8:	f7ff fc34 	bl	8002564 <HAL_GetTick>
 8002cfc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002cfe:	e008      	b.n	8002d12 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d00:	f7ff fc30 	bl	8002564 <HAL_GetTick>
 8002d04:	4602      	mov	r2, r0
 8002d06:	693b      	ldr	r3, [r7, #16]
 8002d08:	1ad3      	subs	r3, r2, r3
 8002d0a:	2b02      	cmp	r3, #2
 8002d0c:	d901      	bls.n	8002d12 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002d0e:	2303      	movs	r3, #3
 8002d10:	e026      	b.n	8002d60 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d12:	4b06      	ldr	r3, [pc, #24]	; (8002d2c <HAL_RCC_OscConfig+0x4c4>)
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d1f0      	bne.n	8002d00 <HAL_RCC_OscConfig+0x498>
 8002d1e:	e01e      	b.n	8002d5e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	69db      	ldr	r3, [r3, #28]
 8002d24:	2b01      	cmp	r3, #1
 8002d26:	d107      	bne.n	8002d38 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002d28:	2301      	movs	r3, #1
 8002d2a:	e019      	b.n	8002d60 <HAL_RCC_OscConfig+0x4f8>
 8002d2c:	40021000 	.word	0x40021000
 8002d30:	40007000 	.word	0x40007000
 8002d34:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002d38:	4b0b      	ldr	r3, [pc, #44]	; (8002d68 <HAL_RCC_OscConfig+0x500>)
 8002d3a:	685b      	ldr	r3, [r3, #4]
 8002d3c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	6a1b      	ldr	r3, [r3, #32]
 8002d48:	429a      	cmp	r2, r3
 8002d4a:	d106      	bne.n	8002d5a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d56:	429a      	cmp	r2, r3
 8002d58:	d001      	beq.n	8002d5e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002d5a:	2301      	movs	r3, #1
 8002d5c:	e000      	b.n	8002d60 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002d5e:	2300      	movs	r3, #0
}
 8002d60:	4618      	mov	r0, r3
 8002d62:	3718      	adds	r7, #24
 8002d64:	46bd      	mov	sp, r7
 8002d66:	bd80      	pop	{r7, pc}
 8002d68:	40021000 	.word	0x40021000

08002d6c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	b084      	sub	sp, #16
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	6078      	str	r0, [r7, #4]
 8002d74:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d101      	bne.n	8002d80 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002d7c:	2301      	movs	r3, #1
 8002d7e:	e0d0      	b.n	8002f22 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002d80:	4b6a      	ldr	r3, [pc, #424]	; (8002f2c <HAL_RCC_ClockConfig+0x1c0>)
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f003 0307 	and.w	r3, r3, #7
 8002d88:	683a      	ldr	r2, [r7, #0]
 8002d8a:	429a      	cmp	r2, r3
 8002d8c:	d910      	bls.n	8002db0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d8e:	4b67      	ldr	r3, [pc, #412]	; (8002f2c <HAL_RCC_ClockConfig+0x1c0>)
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f023 0207 	bic.w	r2, r3, #7
 8002d96:	4965      	ldr	r1, [pc, #404]	; (8002f2c <HAL_RCC_ClockConfig+0x1c0>)
 8002d98:	683b      	ldr	r3, [r7, #0]
 8002d9a:	4313      	orrs	r3, r2
 8002d9c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d9e:	4b63      	ldr	r3, [pc, #396]	; (8002f2c <HAL_RCC_ClockConfig+0x1c0>)
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f003 0307 	and.w	r3, r3, #7
 8002da6:	683a      	ldr	r2, [r7, #0]
 8002da8:	429a      	cmp	r2, r3
 8002daa:	d001      	beq.n	8002db0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002dac:	2301      	movs	r3, #1
 8002dae:	e0b8      	b.n	8002f22 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f003 0302 	and.w	r3, r3, #2
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d020      	beq.n	8002dfe <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f003 0304 	and.w	r3, r3, #4
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d005      	beq.n	8002dd4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002dc8:	4b59      	ldr	r3, [pc, #356]	; (8002f30 <HAL_RCC_ClockConfig+0x1c4>)
 8002dca:	685b      	ldr	r3, [r3, #4]
 8002dcc:	4a58      	ldr	r2, [pc, #352]	; (8002f30 <HAL_RCC_ClockConfig+0x1c4>)
 8002dce:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002dd2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f003 0308 	and.w	r3, r3, #8
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d005      	beq.n	8002dec <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002de0:	4b53      	ldr	r3, [pc, #332]	; (8002f30 <HAL_RCC_ClockConfig+0x1c4>)
 8002de2:	685b      	ldr	r3, [r3, #4]
 8002de4:	4a52      	ldr	r2, [pc, #328]	; (8002f30 <HAL_RCC_ClockConfig+0x1c4>)
 8002de6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002dea:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002dec:	4b50      	ldr	r3, [pc, #320]	; (8002f30 <HAL_RCC_ClockConfig+0x1c4>)
 8002dee:	685b      	ldr	r3, [r3, #4]
 8002df0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	689b      	ldr	r3, [r3, #8]
 8002df8:	494d      	ldr	r1, [pc, #308]	; (8002f30 <HAL_RCC_ClockConfig+0x1c4>)
 8002dfa:	4313      	orrs	r3, r2
 8002dfc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f003 0301 	and.w	r3, r3, #1
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d040      	beq.n	8002e8c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	685b      	ldr	r3, [r3, #4]
 8002e0e:	2b01      	cmp	r3, #1
 8002e10:	d107      	bne.n	8002e22 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e12:	4b47      	ldr	r3, [pc, #284]	; (8002f30 <HAL_RCC_ClockConfig+0x1c4>)
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d115      	bne.n	8002e4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e1e:	2301      	movs	r3, #1
 8002e20:	e07f      	b.n	8002f22 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	685b      	ldr	r3, [r3, #4]
 8002e26:	2b02      	cmp	r3, #2
 8002e28:	d107      	bne.n	8002e3a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e2a:	4b41      	ldr	r3, [pc, #260]	; (8002f30 <HAL_RCC_ClockConfig+0x1c4>)
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d109      	bne.n	8002e4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e36:	2301      	movs	r3, #1
 8002e38:	e073      	b.n	8002f22 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e3a:	4b3d      	ldr	r3, [pc, #244]	; (8002f30 <HAL_RCC_ClockConfig+0x1c4>)
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f003 0302 	and.w	r3, r3, #2
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d101      	bne.n	8002e4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e46:	2301      	movs	r3, #1
 8002e48:	e06b      	b.n	8002f22 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002e4a:	4b39      	ldr	r3, [pc, #228]	; (8002f30 <HAL_RCC_ClockConfig+0x1c4>)
 8002e4c:	685b      	ldr	r3, [r3, #4]
 8002e4e:	f023 0203 	bic.w	r2, r3, #3
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	685b      	ldr	r3, [r3, #4]
 8002e56:	4936      	ldr	r1, [pc, #216]	; (8002f30 <HAL_RCC_ClockConfig+0x1c4>)
 8002e58:	4313      	orrs	r3, r2
 8002e5a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002e5c:	f7ff fb82 	bl	8002564 <HAL_GetTick>
 8002e60:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e62:	e00a      	b.n	8002e7a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e64:	f7ff fb7e 	bl	8002564 <HAL_GetTick>
 8002e68:	4602      	mov	r2, r0
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	1ad3      	subs	r3, r2, r3
 8002e6e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e72:	4293      	cmp	r3, r2
 8002e74:	d901      	bls.n	8002e7a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002e76:	2303      	movs	r3, #3
 8002e78:	e053      	b.n	8002f22 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e7a:	4b2d      	ldr	r3, [pc, #180]	; (8002f30 <HAL_RCC_ClockConfig+0x1c4>)
 8002e7c:	685b      	ldr	r3, [r3, #4]
 8002e7e:	f003 020c 	and.w	r2, r3, #12
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	685b      	ldr	r3, [r3, #4]
 8002e86:	009b      	lsls	r3, r3, #2
 8002e88:	429a      	cmp	r2, r3
 8002e8a:	d1eb      	bne.n	8002e64 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002e8c:	4b27      	ldr	r3, [pc, #156]	; (8002f2c <HAL_RCC_ClockConfig+0x1c0>)
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f003 0307 	and.w	r3, r3, #7
 8002e94:	683a      	ldr	r2, [r7, #0]
 8002e96:	429a      	cmp	r2, r3
 8002e98:	d210      	bcs.n	8002ebc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e9a:	4b24      	ldr	r3, [pc, #144]	; (8002f2c <HAL_RCC_ClockConfig+0x1c0>)
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f023 0207 	bic.w	r2, r3, #7
 8002ea2:	4922      	ldr	r1, [pc, #136]	; (8002f2c <HAL_RCC_ClockConfig+0x1c0>)
 8002ea4:	683b      	ldr	r3, [r7, #0]
 8002ea6:	4313      	orrs	r3, r2
 8002ea8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002eaa:	4b20      	ldr	r3, [pc, #128]	; (8002f2c <HAL_RCC_ClockConfig+0x1c0>)
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f003 0307 	and.w	r3, r3, #7
 8002eb2:	683a      	ldr	r2, [r7, #0]
 8002eb4:	429a      	cmp	r2, r3
 8002eb6:	d001      	beq.n	8002ebc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002eb8:	2301      	movs	r3, #1
 8002eba:	e032      	b.n	8002f22 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f003 0304 	and.w	r3, r3, #4
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d008      	beq.n	8002eda <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ec8:	4b19      	ldr	r3, [pc, #100]	; (8002f30 <HAL_RCC_ClockConfig+0x1c4>)
 8002eca:	685b      	ldr	r3, [r3, #4]
 8002ecc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	68db      	ldr	r3, [r3, #12]
 8002ed4:	4916      	ldr	r1, [pc, #88]	; (8002f30 <HAL_RCC_ClockConfig+0x1c4>)
 8002ed6:	4313      	orrs	r3, r2
 8002ed8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f003 0308 	and.w	r3, r3, #8
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d009      	beq.n	8002efa <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002ee6:	4b12      	ldr	r3, [pc, #72]	; (8002f30 <HAL_RCC_ClockConfig+0x1c4>)
 8002ee8:	685b      	ldr	r3, [r3, #4]
 8002eea:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	691b      	ldr	r3, [r3, #16]
 8002ef2:	00db      	lsls	r3, r3, #3
 8002ef4:	490e      	ldr	r1, [pc, #56]	; (8002f30 <HAL_RCC_ClockConfig+0x1c4>)
 8002ef6:	4313      	orrs	r3, r2
 8002ef8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002efa:	f000 f821 	bl	8002f40 <HAL_RCC_GetSysClockFreq>
 8002efe:	4602      	mov	r2, r0
 8002f00:	4b0b      	ldr	r3, [pc, #44]	; (8002f30 <HAL_RCC_ClockConfig+0x1c4>)
 8002f02:	685b      	ldr	r3, [r3, #4]
 8002f04:	091b      	lsrs	r3, r3, #4
 8002f06:	f003 030f 	and.w	r3, r3, #15
 8002f0a:	490a      	ldr	r1, [pc, #40]	; (8002f34 <HAL_RCC_ClockConfig+0x1c8>)
 8002f0c:	5ccb      	ldrb	r3, [r1, r3]
 8002f0e:	fa22 f303 	lsr.w	r3, r2, r3
 8002f12:	4a09      	ldr	r2, [pc, #36]	; (8002f38 <HAL_RCC_ClockConfig+0x1cc>)
 8002f14:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002f16:	4b09      	ldr	r3, [pc, #36]	; (8002f3c <HAL_RCC_ClockConfig+0x1d0>)
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	f7ff fae0 	bl	80024e0 <HAL_InitTick>

  return HAL_OK;
 8002f20:	2300      	movs	r3, #0
}
 8002f22:	4618      	mov	r0, r3
 8002f24:	3710      	adds	r7, #16
 8002f26:	46bd      	mov	sp, r7
 8002f28:	bd80      	pop	{r7, pc}
 8002f2a:	bf00      	nop
 8002f2c:	40022000 	.word	0x40022000
 8002f30:	40021000 	.word	0x40021000
 8002f34:	080039d4 	.word	0x080039d4
 8002f38:	20000400 	.word	0x20000400
 8002f3c:	20000404 	.word	0x20000404

08002f40 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f40:	b480      	push	{r7}
 8002f42:	b087      	sub	sp, #28
 8002f44:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002f46:	2300      	movs	r3, #0
 8002f48:	60fb      	str	r3, [r7, #12]
 8002f4a:	2300      	movs	r3, #0
 8002f4c:	60bb      	str	r3, [r7, #8]
 8002f4e:	2300      	movs	r3, #0
 8002f50:	617b      	str	r3, [r7, #20]
 8002f52:	2300      	movs	r3, #0
 8002f54:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002f56:	2300      	movs	r3, #0
 8002f58:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002f5a:	4b1e      	ldr	r3, [pc, #120]	; (8002fd4 <HAL_RCC_GetSysClockFreq+0x94>)
 8002f5c:	685b      	ldr	r3, [r3, #4]
 8002f5e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	f003 030c 	and.w	r3, r3, #12
 8002f66:	2b04      	cmp	r3, #4
 8002f68:	d002      	beq.n	8002f70 <HAL_RCC_GetSysClockFreq+0x30>
 8002f6a:	2b08      	cmp	r3, #8
 8002f6c:	d003      	beq.n	8002f76 <HAL_RCC_GetSysClockFreq+0x36>
 8002f6e:	e027      	b.n	8002fc0 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002f70:	4b19      	ldr	r3, [pc, #100]	; (8002fd8 <HAL_RCC_GetSysClockFreq+0x98>)
 8002f72:	613b      	str	r3, [r7, #16]
      break;
 8002f74:	e027      	b.n	8002fc6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	0c9b      	lsrs	r3, r3, #18
 8002f7a:	f003 030f 	and.w	r3, r3, #15
 8002f7e:	4a17      	ldr	r2, [pc, #92]	; (8002fdc <HAL_RCC_GetSysClockFreq+0x9c>)
 8002f80:	5cd3      	ldrb	r3, [r2, r3]
 8002f82:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d010      	beq.n	8002fb0 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002f8e:	4b11      	ldr	r3, [pc, #68]	; (8002fd4 <HAL_RCC_GetSysClockFreq+0x94>)
 8002f90:	685b      	ldr	r3, [r3, #4]
 8002f92:	0c5b      	lsrs	r3, r3, #17
 8002f94:	f003 0301 	and.w	r3, r3, #1
 8002f98:	4a11      	ldr	r2, [pc, #68]	; (8002fe0 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002f9a:	5cd3      	ldrb	r3, [r2, r3]
 8002f9c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	4a0d      	ldr	r2, [pc, #52]	; (8002fd8 <HAL_RCC_GetSysClockFreq+0x98>)
 8002fa2:	fb03 f202 	mul.w	r2, r3, r2
 8002fa6:	68bb      	ldr	r3, [r7, #8]
 8002fa8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fac:	617b      	str	r3, [r7, #20]
 8002fae:	e004      	b.n	8002fba <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	4a0c      	ldr	r2, [pc, #48]	; (8002fe4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002fb4:	fb02 f303 	mul.w	r3, r2, r3
 8002fb8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002fba:	697b      	ldr	r3, [r7, #20]
 8002fbc:	613b      	str	r3, [r7, #16]
      break;
 8002fbe:	e002      	b.n	8002fc6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002fc0:	4b05      	ldr	r3, [pc, #20]	; (8002fd8 <HAL_RCC_GetSysClockFreq+0x98>)
 8002fc2:	613b      	str	r3, [r7, #16]
      break;
 8002fc4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002fc6:	693b      	ldr	r3, [r7, #16]
}
 8002fc8:	4618      	mov	r0, r3
 8002fca:	371c      	adds	r7, #28
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	bc80      	pop	{r7}
 8002fd0:	4770      	bx	lr
 8002fd2:	bf00      	nop
 8002fd4:	40021000 	.word	0x40021000
 8002fd8:	007a1200 	.word	0x007a1200
 8002fdc:	080039e4 	.word	0x080039e4
 8002fe0:	080039f4 	.word	0x080039f4
 8002fe4:	003d0900 	.word	0x003d0900

08002fe8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002fe8:	b480      	push	{r7}
 8002fea:	b085      	sub	sp, #20
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002ff0:	4b0a      	ldr	r3, [pc, #40]	; (800301c <RCC_Delay+0x34>)
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	4a0a      	ldr	r2, [pc, #40]	; (8003020 <RCC_Delay+0x38>)
 8002ff6:	fba2 2303 	umull	r2, r3, r2, r3
 8002ffa:	0a5b      	lsrs	r3, r3, #9
 8002ffc:	687a      	ldr	r2, [r7, #4]
 8002ffe:	fb02 f303 	mul.w	r3, r2, r3
 8003002:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003004:	bf00      	nop
  }
  while (Delay --);
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	1e5a      	subs	r2, r3, #1
 800300a:	60fa      	str	r2, [r7, #12]
 800300c:	2b00      	cmp	r3, #0
 800300e:	d1f9      	bne.n	8003004 <RCC_Delay+0x1c>
}
 8003010:	bf00      	nop
 8003012:	bf00      	nop
 8003014:	3714      	adds	r7, #20
 8003016:	46bd      	mov	sp, r7
 8003018:	bc80      	pop	{r7}
 800301a:	4770      	bx	lr
 800301c:	20000400 	.word	0x20000400
 8003020:	10624dd3 	.word	0x10624dd3

08003024 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003024:	b580      	push	{r7, lr}
 8003026:	b082      	sub	sp, #8
 8003028:	af00      	add	r7, sp, #0
 800302a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	2b00      	cmp	r3, #0
 8003030:	d101      	bne.n	8003036 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003032:	2301      	movs	r3, #1
 8003034:	e041      	b.n	80030ba <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800303c:	b2db      	uxtb	r3, r3
 800303e:	2b00      	cmp	r3, #0
 8003040:	d106      	bne.n	8003050 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	2200      	movs	r2, #0
 8003046:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800304a:	6878      	ldr	r0, [r7, #4]
 800304c:	f7ff f9e8 	bl	8002420 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	2202      	movs	r2, #2
 8003054:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681a      	ldr	r2, [r3, #0]
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	3304      	adds	r3, #4
 8003060:	4619      	mov	r1, r3
 8003062:	4610      	mov	r0, r2
 8003064:	f000 fa6e 	bl	8003544 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	2201      	movs	r2, #1
 800306c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	2201      	movs	r2, #1
 8003074:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	2201      	movs	r2, #1
 800307c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	2201      	movs	r2, #1
 8003084:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	2201      	movs	r2, #1
 800308c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	2201      	movs	r2, #1
 8003094:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	2201      	movs	r2, #1
 800309c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	2201      	movs	r2, #1
 80030a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	2201      	movs	r2, #1
 80030ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	2201      	movs	r2, #1
 80030b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80030b8:	2300      	movs	r3, #0
}
 80030ba:	4618      	mov	r0, r3
 80030bc:	3708      	adds	r7, #8
 80030be:	46bd      	mov	sp, r7
 80030c0:	bd80      	pop	{r7, pc}
	...

080030c4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80030c4:	b480      	push	{r7}
 80030c6:	b085      	sub	sp, #20
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030d2:	b2db      	uxtb	r3, r3
 80030d4:	2b01      	cmp	r3, #1
 80030d6:	d001      	beq.n	80030dc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80030d8:	2301      	movs	r3, #1
 80030da:	e035      	b.n	8003148 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	2202      	movs	r2, #2
 80030e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	68da      	ldr	r2, [r3, #12]
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f042 0201 	orr.w	r2, r2, #1
 80030f2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	4a16      	ldr	r2, [pc, #88]	; (8003154 <HAL_TIM_Base_Start_IT+0x90>)
 80030fa:	4293      	cmp	r3, r2
 80030fc:	d009      	beq.n	8003112 <HAL_TIM_Base_Start_IT+0x4e>
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003106:	d004      	beq.n	8003112 <HAL_TIM_Base_Start_IT+0x4e>
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	4a12      	ldr	r2, [pc, #72]	; (8003158 <HAL_TIM_Base_Start_IT+0x94>)
 800310e:	4293      	cmp	r3, r2
 8003110:	d111      	bne.n	8003136 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	689b      	ldr	r3, [r3, #8]
 8003118:	f003 0307 	and.w	r3, r3, #7
 800311c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	2b06      	cmp	r3, #6
 8003122:	d010      	beq.n	8003146 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	681a      	ldr	r2, [r3, #0]
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f042 0201 	orr.w	r2, r2, #1
 8003132:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003134:	e007      	b.n	8003146 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	681a      	ldr	r2, [r3, #0]
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f042 0201 	orr.w	r2, r2, #1
 8003144:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003146:	2300      	movs	r3, #0
}
 8003148:	4618      	mov	r0, r3
 800314a:	3714      	adds	r7, #20
 800314c:	46bd      	mov	sp, r7
 800314e:	bc80      	pop	{r7}
 8003150:	4770      	bx	lr
 8003152:	bf00      	nop
 8003154:	40012c00 	.word	0x40012c00
 8003158:	40000400 	.word	0x40000400

0800315c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800315c:	b580      	push	{r7, lr}
 800315e:	b082      	sub	sp, #8
 8003160:	af00      	add	r7, sp, #0
 8003162:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	691b      	ldr	r3, [r3, #16]
 800316a:	f003 0302 	and.w	r3, r3, #2
 800316e:	2b02      	cmp	r3, #2
 8003170:	d122      	bne.n	80031b8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	68db      	ldr	r3, [r3, #12]
 8003178:	f003 0302 	and.w	r3, r3, #2
 800317c:	2b02      	cmp	r3, #2
 800317e:	d11b      	bne.n	80031b8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f06f 0202 	mvn.w	r2, #2
 8003188:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	2201      	movs	r2, #1
 800318e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	699b      	ldr	r3, [r3, #24]
 8003196:	f003 0303 	and.w	r3, r3, #3
 800319a:	2b00      	cmp	r3, #0
 800319c:	d003      	beq.n	80031a6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800319e:	6878      	ldr	r0, [r7, #4]
 80031a0:	f000 f9b4 	bl	800350c <HAL_TIM_IC_CaptureCallback>
 80031a4:	e005      	b.n	80031b2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80031a6:	6878      	ldr	r0, [r7, #4]
 80031a8:	f000 f9a7 	bl	80034fa <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80031ac:	6878      	ldr	r0, [r7, #4]
 80031ae:	f000 f9b6 	bl	800351e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	2200      	movs	r2, #0
 80031b6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	691b      	ldr	r3, [r3, #16]
 80031be:	f003 0304 	and.w	r3, r3, #4
 80031c2:	2b04      	cmp	r3, #4
 80031c4:	d122      	bne.n	800320c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	68db      	ldr	r3, [r3, #12]
 80031cc:	f003 0304 	and.w	r3, r3, #4
 80031d0:	2b04      	cmp	r3, #4
 80031d2:	d11b      	bne.n	800320c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f06f 0204 	mvn.w	r2, #4
 80031dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	2202      	movs	r2, #2
 80031e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	699b      	ldr	r3, [r3, #24]
 80031ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d003      	beq.n	80031fa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80031f2:	6878      	ldr	r0, [r7, #4]
 80031f4:	f000 f98a 	bl	800350c <HAL_TIM_IC_CaptureCallback>
 80031f8:	e005      	b.n	8003206 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80031fa:	6878      	ldr	r0, [r7, #4]
 80031fc:	f000 f97d 	bl	80034fa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003200:	6878      	ldr	r0, [r7, #4]
 8003202:	f000 f98c 	bl	800351e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	2200      	movs	r2, #0
 800320a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	691b      	ldr	r3, [r3, #16]
 8003212:	f003 0308 	and.w	r3, r3, #8
 8003216:	2b08      	cmp	r3, #8
 8003218:	d122      	bne.n	8003260 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	68db      	ldr	r3, [r3, #12]
 8003220:	f003 0308 	and.w	r3, r3, #8
 8003224:	2b08      	cmp	r3, #8
 8003226:	d11b      	bne.n	8003260 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f06f 0208 	mvn.w	r2, #8
 8003230:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	2204      	movs	r2, #4
 8003236:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	69db      	ldr	r3, [r3, #28]
 800323e:	f003 0303 	and.w	r3, r3, #3
 8003242:	2b00      	cmp	r3, #0
 8003244:	d003      	beq.n	800324e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003246:	6878      	ldr	r0, [r7, #4]
 8003248:	f000 f960 	bl	800350c <HAL_TIM_IC_CaptureCallback>
 800324c:	e005      	b.n	800325a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800324e:	6878      	ldr	r0, [r7, #4]
 8003250:	f000 f953 	bl	80034fa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003254:	6878      	ldr	r0, [r7, #4]
 8003256:	f000 f962 	bl	800351e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	2200      	movs	r2, #0
 800325e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	691b      	ldr	r3, [r3, #16]
 8003266:	f003 0310 	and.w	r3, r3, #16
 800326a:	2b10      	cmp	r3, #16
 800326c:	d122      	bne.n	80032b4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	68db      	ldr	r3, [r3, #12]
 8003274:	f003 0310 	and.w	r3, r3, #16
 8003278:	2b10      	cmp	r3, #16
 800327a:	d11b      	bne.n	80032b4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f06f 0210 	mvn.w	r2, #16
 8003284:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	2208      	movs	r2, #8
 800328a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	69db      	ldr	r3, [r3, #28]
 8003292:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003296:	2b00      	cmp	r3, #0
 8003298:	d003      	beq.n	80032a2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800329a:	6878      	ldr	r0, [r7, #4]
 800329c:	f000 f936 	bl	800350c <HAL_TIM_IC_CaptureCallback>
 80032a0:	e005      	b.n	80032ae <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80032a2:	6878      	ldr	r0, [r7, #4]
 80032a4:	f000 f929 	bl	80034fa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80032a8:	6878      	ldr	r0, [r7, #4]
 80032aa:	f000 f938 	bl	800351e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	2200      	movs	r2, #0
 80032b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	691b      	ldr	r3, [r3, #16]
 80032ba:	f003 0301 	and.w	r3, r3, #1
 80032be:	2b01      	cmp	r3, #1
 80032c0:	d10e      	bne.n	80032e0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	68db      	ldr	r3, [r3, #12]
 80032c8:	f003 0301 	and.w	r3, r3, #1
 80032cc:	2b01      	cmp	r3, #1
 80032ce:	d107      	bne.n	80032e0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f06f 0201 	mvn.w	r2, #1
 80032d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80032da:	6878      	ldr	r0, [r7, #4]
 80032dc:	f7fe ffcd 	bl	800227a <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	691b      	ldr	r3, [r3, #16]
 80032e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032ea:	2b80      	cmp	r3, #128	; 0x80
 80032ec:	d10e      	bne.n	800330c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	68db      	ldr	r3, [r3, #12]
 80032f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032f8:	2b80      	cmp	r3, #128	; 0x80
 80032fa:	d107      	bne.n	800330c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003304:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003306:	6878      	ldr	r0, [r7, #4]
 8003308:	f000 fa6b 	bl	80037e2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	691b      	ldr	r3, [r3, #16]
 8003312:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003316:	2b40      	cmp	r3, #64	; 0x40
 8003318:	d10e      	bne.n	8003338 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	68db      	ldr	r3, [r3, #12]
 8003320:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003324:	2b40      	cmp	r3, #64	; 0x40
 8003326:	d107      	bne.n	8003338 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003330:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003332:	6878      	ldr	r0, [r7, #4]
 8003334:	f000 f8fc 	bl	8003530 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	691b      	ldr	r3, [r3, #16]
 800333e:	f003 0320 	and.w	r3, r3, #32
 8003342:	2b20      	cmp	r3, #32
 8003344:	d10e      	bne.n	8003364 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	68db      	ldr	r3, [r3, #12]
 800334c:	f003 0320 	and.w	r3, r3, #32
 8003350:	2b20      	cmp	r3, #32
 8003352:	d107      	bne.n	8003364 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f06f 0220 	mvn.w	r2, #32
 800335c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800335e:	6878      	ldr	r0, [r7, #4]
 8003360:	f000 fa36 	bl	80037d0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003364:	bf00      	nop
 8003366:	3708      	adds	r7, #8
 8003368:	46bd      	mov	sp, r7
 800336a:	bd80      	pop	{r7, pc}

0800336c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800336c:	b580      	push	{r7, lr}
 800336e:	b084      	sub	sp, #16
 8003370:	af00      	add	r7, sp, #0
 8003372:	6078      	str	r0, [r7, #4]
 8003374:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003376:	2300      	movs	r3, #0
 8003378:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003380:	2b01      	cmp	r3, #1
 8003382:	d101      	bne.n	8003388 <HAL_TIM_ConfigClockSource+0x1c>
 8003384:	2302      	movs	r3, #2
 8003386:	e0b4      	b.n	80034f2 <HAL_TIM_ConfigClockSource+0x186>
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	2201      	movs	r2, #1
 800338c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	2202      	movs	r2, #2
 8003394:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	689b      	ldr	r3, [r3, #8]
 800339e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80033a0:	68bb      	ldr	r3, [r7, #8]
 80033a2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80033a6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80033a8:	68bb      	ldr	r3, [r7, #8]
 80033aa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80033ae:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	68ba      	ldr	r2, [r7, #8]
 80033b6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80033b8:	683b      	ldr	r3, [r7, #0]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80033c0:	d03e      	beq.n	8003440 <HAL_TIM_ConfigClockSource+0xd4>
 80033c2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80033c6:	f200 8087 	bhi.w	80034d8 <HAL_TIM_ConfigClockSource+0x16c>
 80033ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80033ce:	f000 8086 	beq.w	80034de <HAL_TIM_ConfigClockSource+0x172>
 80033d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80033d6:	d87f      	bhi.n	80034d8 <HAL_TIM_ConfigClockSource+0x16c>
 80033d8:	2b70      	cmp	r3, #112	; 0x70
 80033da:	d01a      	beq.n	8003412 <HAL_TIM_ConfigClockSource+0xa6>
 80033dc:	2b70      	cmp	r3, #112	; 0x70
 80033de:	d87b      	bhi.n	80034d8 <HAL_TIM_ConfigClockSource+0x16c>
 80033e0:	2b60      	cmp	r3, #96	; 0x60
 80033e2:	d050      	beq.n	8003486 <HAL_TIM_ConfigClockSource+0x11a>
 80033e4:	2b60      	cmp	r3, #96	; 0x60
 80033e6:	d877      	bhi.n	80034d8 <HAL_TIM_ConfigClockSource+0x16c>
 80033e8:	2b50      	cmp	r3, #80	; 0x50
 80033ea:	d03c      	beq.n	8003466 <HAL_TIM_ConfigClockSource+0xfa>
 80033ec:	2b50      	cmp	r3, #80	; 0x50
 80033ee:	d873      	bhi.n	80034d8 <HAL_TIM_ConfigClockSource+0x16c>
 80033f0:	2b40      	cmp	r3, #64	; 0x40
 80033f2:	d058      	beq.n	80034a6 <HAL_TIM_ConfigClockSource+0x13a>
 80033f4:	2b40      	cmp	r3, #64	; 0x40
 80033f6:	d86f      	bhi.n	80034d8 <HAL_TIM_ConfigClockSource+0x16c>
 80033f8:	2b30      	cmp	r3, #48	; 0x30
 80033fa:	d064      	beq.n	80034c6 <HAL_TIM_ConfigClockSource+0x15a>
 80033fc:	2b30      	cmp	r3, #48	; 0x30
 80033fe:	d86b      	bhi.n	80034d8 <HAL_TIM_ConfigClockSource+0x16c>
 8003400:	2b20      	cmp	r3, #32
 8003402:	d060      	beq.n	80034c6 <HAL_TIM_ConfigClockSource+0x15a>
 8003404:	2b20      	cmp	r3, #32
 8003406:	d867      	bhi.n	80034d8 <HAL_TIM_ConfigClockSource+0x16c>
 8003408:	2b00      	cmp	r3, #0
 800340a:	d05c      	beq.n	80034c6 <HAL_TIM_ConfigClockSource+0x15a>
 800340c:	2b10      	cmp	r3, #16
 800340e:	d05a      	beq.n	80034c6 <HAL_TIM_ConfigClockSource+0x15a>
 8003410:	e062      	b.n	80034d8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	6818      	ldr	r0, [r3, #0]
 8003416:	683b      	ldr	r3, [r7, #0]
 8003418:	6899      	ldr	r1, [r3, #8]
 800341a:	683b      	ldr	r3, [r7, #0]
 800341c:	685a      	ldr	r2, [r3, #4]
 800341e:	683b      	ldr	r3, [r7, #0]
 8003420:	68db      	ldr	r3, [r3, #12]
 8003422:	f000 f95e 	bl	80036e2 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	689b      	ldr	r3, [r3, #8]
 800342c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800342e:	68bb      	ldr	r3, [r7, #8]
 8003430:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003434:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	68ba      	ldr	r2, [r7, #8]
 800343c:	609a      	str	r2, [r3, #8]
      break;
 800343e:	e04f      	b.n	80034e0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	6818      	ldr	r0, [r3, #0]
 8003444:	683b      	ldr	r3, [r7, #0]
 8003446:	6899      	ldr	r1, [r3, #8]
 8003448:	683b      	ldr	r3, [r7, #0]
 800344a:	685a      	ldr	r2, [r3, #4]
 800344c:	683b      	ldr	r3, [r7, #0]
 800344e:	68db      	ldr	r3, [r3, #12]
 8003450:	f000 f947 	bl	80036e2 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	689a      	ldr	r2, [r3, #8]
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003462:	609a      	str	r2, [r3, #8]
      break;
 8003464:	e03c      	b.n	80034e0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	6818      	ldr	r0, [r3, #0]
 800346a:	683b      	ldr	r3, [r7, #0]
 800346c:	6859      	ldr	r1, [r3, #4]
 800346e:	683b      	ldr	r3, [r7, #0]
 8003470:	68db      	ldr	r3, [r3, #12]
 8003472:	461a      	mov	r2, r3
 8003474:	f000 f8be 	bl	80035f4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	2150      	movs	r1, #80	; 0x50
 800347e:	4618      	mov	r0, r3
 8003480:	f000 f915 	bl	80036ae <TIM_ITRx_SetConfig>
      break;
 8003484:	e02c      	b.n	80034e0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	6818      	ldr	r0, [r3, #0]
 800348a:	683b      	ldr	r3, [r7, #0]
 800348c:	6859      	ldr	r1, [r3, #4]
 800348e:	683b      	ldr	r3, [r7, #0]
 8003490:	68db      	ldr	r3, [r3, #12]
 8003492:	461a      	mov	r2, r3
 8003494:	f000 f8dc 	bl	8003650 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	2160      	movs	r1, #96	; 0x60
 800349e:	4618      	mov	r0, r3
 80034a0:	f000 f905 	bl	80036ae <TIM_ITRx_SetConfig>
      break;
 80034a4:	e01c      	b.n	80034e0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	6818      	ldr	r0, [r3, #0]
 80034aa:	683b      	ldr	r3, [r7, #0]
 80034ac:	6859      	ldr	r1, [r3, #4]
 80034ae:	683b      	ldr	r3, [r7, #0]
 80034b0:	68db      	ldr	r3, [r3, #12]
 80034b2:	461a      	mov	r2, r3
 80034b4:	f000 f89e 	bl	80035f4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	2140      	movs	r1, #64	; 0x40
 80034be:	4618      	mov	r0, r3
 80034c0:	f000 f8f5 	bl	80036ae <TIM_ITRx_SetConfig>
      break;
 80034c4:	e00c      	b.n	80034e0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681a      	ldr	r2, [r3, #0]
 80034ca:	683b      	ldr	r3, [r7, #0]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	4619      	mov	r1, r3
 80034d0:	4610      	mov	r0, r2
 80034d2:	f000 f8ec 	bl	80036ae <TIM_ITRx_SetConfig>
      break;
 80034d6:	e003      	b.n	80034e0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80034d8:	2301      	movs	r3, #1
 80034da:	73fb      	strb	r3, [r7, #15]
      break;
 80034dc:	e000      	b.n	80034e0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80034de:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	2201      	movs	r2, #1
 80034e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	2200      	movs	r2, #0
 80034ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80034f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80034f2:	4618      	mov	r0, r3
 80034f4:	3710      	adds	r7, #16
 80034f6:	46bd      	mov	sp, r7
 80034f8:	bd80      	pop	{r7, pc}

080034fa <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80034fa:	b480      	push	{r7}
 80034fc:	b083      	sub	sp, #12
 80034fe:	af00      	add	r7, sp, #0
 8003500:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003502:	bf00      	nop
 8003504:	370c      	adds	r7, #12
 8003506:	46bd      	mov	sp, r7
 8003508:	bc80      	pop	{r7}
 800350a:	4770      	bx	lr

0800350c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800350c:	b480      	push	{r7}
 800350e:	b083      	sub	sp, #12
 8003510:	af00      	add	r7, sp, #0
 8003512:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003514:	bf00      	nop
 8003516:	370c      	adds	r7, #12
 8003518:	46bd      	mov	sp, r7
 800351a:	bc80      	pop	{r7}
 800351c:	4770      	bx	lr

0800351e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800351e:	b480      	push	{r7}
 8003520:	b083      	sub	sp, #12
 8003522:	af00      	add	r7, sp, #0
 8003524:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003526:	bf00      	nop
 8003528:	370c      	adds	r7, #12
 800352a:	46bd      	mov	sp, r7
 800352c:	bc80      	pop	{r7}
 800352e:	4770      	bx	lr

08003530 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003530:	b480      	push	{r7}
 8003532:	b083      	sub	sp, #12
 8003534:	af00      	add	r7, sp, #0
 8003536:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003538:	bf00      	nop
 800353a:	370c      	adds	r7, #12
 800353c:	46bd      	mov	sp, r7
 800353e:	bc80      	pop	{r7}
 8003540:	4770      	bx	lr
	...

08003544 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003544:	b480      	push	{r7}
 8003546:	b085      	sub	sp, #20
 8003548:	af00      	add	r7, sp, #0
 800354a:	6078      	str	r0, [r7, #4]
 800354c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	4a25      	ldr	r2, [pc, #148]	; (80035ec <TIM_Base_SetConfig+0xa8>)
 8003558:	4293      	cmp	r3, r2
 800355a:	d007      	beq.n	800356c <TIM_Base_SetConfig+0x28>
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003562:	d003      	beq.n	800356c <TIM_Base_SetConfig+0x28>
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	4a22      	ldr	r2, [pc, #136]	; (80035f0 <TIM_Base_SetConfig+0xac>)
 8003568:	4293      	cmp	r3, r2
 800356a:	d108      	bne.n	800357e <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003572:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003574:	683b      	ldr	r3, [r7, #0]
 8003576:	685b      	ldr	r3, [r3, #4]
 8003578:	68fa      	ldr	r2, [r7, #12]
 800357a:	4313      	orrs	r3, r2
 800357c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	4a1a      	ldr	r2, [pc, #104]	; (80035ec <TIM_Base_SetConfig+0xa8>)
 8003582:	4293      	cmp	r3, r2
 8003584:	d007      	beq.n	8003596 <TIM_Base_SetConfig+0x52>
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800358c:	d003      	beq.n	8003596 <TIM_Base_SetConfig+0x52>
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	4a17      	ldr	r2, [pc, #92]	; (80035f0 <TIM_Base_SetConfig+0xac>)
 8003592:	4293      	cmp	r3, r2
 8003594:	d108      	bne.n	80035a8 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800359c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800359e:	683b      	ldr	r3, [r7, #0]
 80035a0:	68db      	ldr	r3, [r3, #12]
 80035a2:	68fa      	ldr	r2, [r7, #12]
 80035a4:	4313      	orrs	r3, r2
 80035a6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80035ae:	683b      	ldr	r3, [r7, #0]
 80035b0:	695b      	ldr	r3, [r3, #20]
 80035b2:	4313      	orrs	r3, r2
 80035b4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	68fa      	ldr	r2, [r7, #12]
 80035ba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80035bc:	683b      	ldr	r3, [r7, #0]
 80035be:	689a      	ldr	r2, [r3, #8]
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80035c4:	683b      	ldr	r3, [r7, #0]
 80035c6:	681a      	ldr	r2, [r3, #0]
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	4a07      	ldr	r2, [pc, #28]	; (80035ec <TIM_Base_SetConfig+0xa8>)
 80035d0:	4293      	cmp	r3, r2
 80035d2:	d103      	bne.n	80035dc <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80035d4:	683b      	ldr	r3, [r7, #0]
 80035d6:	691a      	ldr	r2, [r3, #16]
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	2201      	movs	r2, #1
 80035e0:	615a      	str	r2, [r3, #20]
}
 80035e2:	bf00      	nop
 80035e4:	3714      	adds	r7, #20
 80035e6:	46bd      	mov	sp, r7
 80035e8:	bc80      	pop	{r7}
 80035ea:	4770      	bx	lr
 80035ec:	40012c00 	.word	0x40012c00
 80035f0:	40000400 	.word	0x40000400

080035f4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80035f4:	b480      	push	{r7}
 80035f6:	b087      	sub	sp, #28
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	60f8      	str	r0, [r7, #12]
 80035fc:	60b9      	str	r1, [r7, #8]
 80035fe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	6a1b      	ldr	r3, [r3, #32]
 8003604:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	6a1b      	ldr	r3, [r3, #32]
 800360a:	f023 0201 	bic.w	r2, r3, #1
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	699b      	ldr	r3, [r3, #24]
 8003616:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003618:	693b      	ldr	r3, [r7, #16]
 800361a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800361e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	011b      	lsls	r3, r3, #4
 8003624:	693a      	ldr	r2, [r7, #16]
 8003626:	4313      	orrs	r3, r2
 8003628:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800362a:	697b      	ldr	r3, [r7, #20]
 800362c:	f023 030a 	bic.w	r3, r3, #10
 8003630:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003632:	697a      	ldr	r2, [r7, #20]
 8003634:	68bb      	ldr	r3, [r7, #8]
 8003636:	4313      	orrs	r3, r2
 8003638:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	693a      	ldr	r2, [r7, #16]
 800363e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	697a      	ldr	r2, [r7, #20]
 8003644:	621a      	str	r2, [r3, #32]
}
 8003646:	bf00      	nop
 8003648:	371c      	adds	r7, #28
 800364a:	46bd      	mov	sp, r7
 800364c:	bc80      	pop	{r7}
 800364e:	4770      	bx	lr

08003650 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003650:	b480      	push	{r7}
 8003652:	b087      	sub	sp, #28
 8003654:	af00      	add	r7, sp, #0
 8003656:	60f8      	str	r0, [r7, #12]
 8003658:	60b9      	str	r1, [r7, #8]
 800365a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	6a1b      	ldr	r3, [r3, #32]
 8003660:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	6a1b      	ldr	r3, [r3, #32]
 8003666:	f023 0210 	bic.w	r2, r3, #16
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	699b      	ldr	r3, [r3, #24]
 8003672:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003674:	693b      	ldr	r3, [r7, #16]
 8003676:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800367a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	031b      	lsls	r3, r3, #12
 8003680:	693a      	ldr	r2, [r7, #16]
 8003682:	4313      	orrs	r3, r2
 8003684:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003686:	697b      	ldr	r3, [r7, #20]
 8003688:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800368c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800368e:	68bb      	ldr	r3, [r7, #8]
 8003690:	011b      	lsls	r3, r3, #4
 8003692:	697a      	ldr	r2, [r7, #20]
 8003694:	4313      	orrs	r3, r2
 8003696:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	693a      	ldr	r2, [r7, #16]
 800369c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	697a      	ldr	r2, [r7, #20]
 80036a2:	621a      	str	r2, [r3, #32]
}
 80036a4:	bf00      	nop
 80036a6:	371c      	adds	r7, #28
 80036a8:	46bd      	mov	sp, r7
 80036aa:	bc80      	pop	{r7}
 80036ac:	4770      	bx	lr

080036ae <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80036ae:	b480      	push	{r7}
 80036b0:	b085      	sub	sp, #20
 80036b2:	af00      	add	r7, sp, #0
 80036b4:	6078      	str	r0, [r7, #4]
 80036b6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	689b      	ldr	r3, [r3, #8]
 80036bc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036c4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80036c6:	683a      	ldr	r2, [r7, #0]
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	4313      	orrs	r3, r2
 80036cc:	f043 0307 	orr.w	r3, r3, #7
 80036d0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	68fa      	ldr	r2, [r7, #12]
 80036d6:	609a      	str	r2, [r3, #8]
}
 80036d8:	bf00      	nop
 80036da:	3714      	adds	r7, #20
 80036dc:	46bd      	mov	sp, r7
 80036de:	bc80      	pop	{r7}
 80036e0:	4770      	bx	lr

080036e2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80036e2:	b480      	push	{r7}
 80036e4:	b087      	sub	sp, #28
 80036e6:	af00      	add	r7, sp, #0
 80036e8:	60f8      	str	r0, [r7, #12]
 80036ea:	60b9      	str	r1, [r7, #8]
 80036ec:	607a      	str	r2, [r7, #4]
 80036ee:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	689b      	ldr	r3, [r3, #8]
 80036f4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80036f6:	697b      	ldr	r3, [r7, #20]
 80036f8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80036fc:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80036fe:	683b      	ldr	r3, [r7, #0]
 8003700:	021a      	lsls	r2, r3, #8
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	431a      	orrs	r2, r3
 8003706:	68bb      	ldr	r3, [r7, #8]
 8003708:	4313      	orrs	r3, r2
 800370a:	697a      	ldr	r2, [r7, #20]
 800370c:	4313      	orrs	r3, r2
 800370e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	697a      	ldr	r2, [r7, #20]
 8003714:	609a      	str	r2, [r3, #8]
}
 8003716:	bf00      	nop
 8003718:	371c      	adds	r7, #28
 800371a:	46bd      	mov	sp, r7
 800371c:	bc80      	pop	{r7}
 800371e:	4770      	bx	lr

08003720 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003720:	b480      	push	{r7}
 8003722:	b085      	sub	sp, #20
 8003724:	af00      	add	r7, sp, #0
 8003726:	6078      	str	r0, [r7, #4]
 8003728:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003730:	2b01      	cmp	r3, #1
 8003732:	d101      	bne.n	8003738 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003734:	2302      	movs	r3, #2
 8003736:	e041      	b.n	80037bc <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	2201      	movs	r2, #1
 800373c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	2202      	movs	r2, #2
 8003744:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	685b      	ldr	r3, [r3, #4]
 800374e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	689b      	ldr	r3, [r3, #8]
 8003756:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800375e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003760:	683b      	ldr	r3, [r7, #0]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	68fa      	ldr	r2, [r7, #12]
 8003766:	4313      	orrs	r3, r2
 8003768:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	68fa      	ldr	r2, [r7, #12]
 8003770:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	4a14      	ldr	r2, [pc, #80]	; (80037c8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8003778:	4293      	cmp	r3, r2
 800377a:	d009      	beq.n	8003790 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003784:	d004      	beq.n	8003790 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	4a10      	ldr	r2, [pc, #64]	; (80037cc <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 800378c:	4293      	cmp	r3, r2
 800378e:	d10c      	bne.n	80037aa <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003790:	68bb      	ldr	r3, [r7, #8]
 8003792:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003796:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003798:	683b      	ldr	r3, [r7, #0]
 800379a:	685b      	ldr	r3, [r3, #4]
 800379c:	68ba      	ldr	r2, [r7, #8]
 800379e:	4313      	orrs	r3, r2
 80037a0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	68ba      	ldr	r2, [r7, #8]
 80037a8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	2201      	movs	r2, #1
 80037ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	2200      	movs	r2, #0
 80037b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80037ba:	2300      	movs	r3, #0
}
 80037bc:	4618      	mov	r0, r3
 80037be:	3714      	adds	r7, #20
 80037c0:	46bd      	mov	sp, r7
 80037c2:	bc80      	pop	{r7}
 80037c4:	4770      	bx	lr
 80037c6:	bf00      	nop
 80037c8:	40012c00 	.word	0x40012c00
 80037cc:	40000400 	.word	0x40000400

080037d0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80037d0:	b480      	push	{r7}
 80037d2:	b083      	sub	sp, #12
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80037d8:	bf00      	nop
 80037da:	370c      	adds	r7, #12
 80037dc:	46bd      	mov	sp, r7
 80037de:	bc80      	pop	{r7}
 80037e0:	4770      	bx	lr

080037e2 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80037e2:	b480      	push	{r7}
 80037e4:	b083      	sub	sp, #12
 80037e6:	af00      	add	r7, sp, #0
 80037e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80037ea:	bf00      	nop
 80037ec:	370c      	adds	r7, #12
 80037ee:	46bd      	mov	sp, r7
 80037f0:	bc80      	pop	{r7}
 80037f2:	4770      	bx	lr

080037f4 <OS_1ms>:
 *The function will be call 1ms loop .
 *
 **********************************************************
 **/
void OS_1ms(void)
{
 80037f4:	b480      	push	{r7}
 80037f6:	af00      	add	r7, sp, #0

}
 80037f8:	bf00      	nop
 80037fa:	46bd      	mov	sp, r7
 80037fc:	bc80      	pop	{r7}
 80037fe:	4770      	bx	lr

08003800 <OS_2ms>:
 *The function will be call 2ms loop .
 *
 **********************************************************
 **/
void OS_2ms(void)
{
 8003800:	b480      	push	{r7}
 8003802:	af00      	add	r7, sp, #0

}
 8003804:	bf00      	nop
 8003806:	46bd      	mov	sp, r7
 8003808:	bc80      	pop	{r7}
 800380a:	4770      	bx	lr

0800380c <OS_4ms1>:
 *The function will be call 4ms loop .
 *
 **********************************************************
 **/
void OS_4ms1(void)
{
 800380c:	b480      	push	{r7}
 800380e:	af00      	add	r7, sp, #0

}
 8003810:	bf00      	nop
 8003812:	46bd      	mov	sp, r7
 8003814:	bc80      	pop	{r7}
 8003816:	4770      	bx	lr

08003818 <OS_8ms3>:
 *The function will be call 8ms loop .
 *
 **********************************************************
 **/
void OS_8ms3(void)
{
 8003818:	b480      	push	{r7}
 800381a:	af00      	add	r7, sp, #0

}
 800381c:	bf00      	nop
 800381e:	46bd      	mov	sp, r7
 8003820:	bc80      	pop	{r7}
 8003822:	4770      	bx	lr

08003824 <OS_8ms7>:
 *The function will be call 8ms loop .
 *
 **********************************************************
 **/
void OS_8ms7(void)
{
 8003824:	b580      	push	{r7, lr}
 8003826:	af00      	add	r7, sp, #0
	Wdg_Task();
 8003828:	f000 f854 	bl	80038d4 <Wdg_Task>
}
 800382c:	bf00      	nop
 800382e:	bd80      	pop	{r7, pc}

08003830 <OS_Idle>:
 *The function will be call when idle .
 *
 **********************************************************
 **/
void OS_Idle(void)
{
 8003830:	b480      	push	{r7}
 8003832:	af00      	add	r7, sp, #0

}
 8003834:	bf00      	nop
 8003836:	46bd      	mov	sp, r7
 8003838:	bc80      	pop	{r7}
 800383a:	4770      	bx	lr

0800383c <LittleHeartFunc>:
 *The function need be ported to timer for 1ms .
 *
 **********************************************************
 **/
void LittleHeartFunc(void)
{
 800383c:	b480      	push	{r7}
 800383e:	af00      	add	r7, sp, #0
	LittleHeart = OS_TRUE;
 8003840:	4b03      	ldr	r3, [pc, #12]	; (8003850 <LittleHeartFunc+0x14>)
 8003842:	2201      	movs	r2, #1
 8003844:	701a      	strb	r2, [r3, #0]
}
 8003846:	bf00      	nop
 8003848:	46bd      	mov	sp, r7
 800384a:	bc80      	pop	{r7}
 800384c:	4770      	bx	lr
 800384e:	bf00      	nop
 8003850:	20000480 	.word	0x20000480

08003854 <OS>:
 *The function need be ported to main function endless loop.
 *
 ***********************************************************
 **/
void OS(void)
{
 8003854:	b580      	push	{r7, lr}
 8003856:	b082      	sub	sp, #8
 8003858:	af00      	add	r7, sp, #0
	static unsigned char HeartCnt = 0u;

	if(LittleHeart == OS_TRUE)
 800385a:	4b1b      	ldr	r3, [pc, #108]	; (80038c8 <OS+0x74>)
 800385c:	781b      	ldrb	r3, [r3, #0]
 800385e:	b2db      	uxtb	r3, r3
 8003860:	2b01      	cmp	r3, #1
 8003862:	d12a      	bne.n	80038ba <OS+0x66>
	{
		HeartCnt++;
 8003864:	4b19      	ldr	r3, [pc, #100]	; (80038cc <OS+0x78>)
 8003866:	781b      	ldrb	r3, [r3, #0]
 8003868:	3301      	adds	r3, #1
 800386a:	b2da      	uxtb	r2, r3
 800386c:	4b17      	ldr	r3, [pc, #92]	; (80038cc <OS+0x78>)
 800386e:	701a      	strb	r2, [r3, #0]
		LittleHeart = OS_FALSE;
 8003870:	4b15      	ldr	r3, [pc, #84]	; (80038c8 <OS+0x74>)
 8003872:	2200      	movs	r2, #0
 8003874:	701a      	strb	r2, [r3, #0]

		/* Scheduler % --> & */
		for (enum TaskIdT i = TaskId_1ms; i < TaskIdNumber; i++)
 8003876:	2300      	movs	r3, #0
 8003878:	71fb      	strb	r3, [r7, #7]
 800387a:	e01a      	b.n	80038b2 <OS+0x5e>
		{
			if (TaskTable[i].Shifting == (HeartCnt & (TaskTable[i].Cycle - 1)))
 800387c:	79fb      	ldrb	r3, [r7, #7]
 800387e:	4a14      	ldr	r2, [pc, #80]	; (80038d0 <OS+0x7c>)
 8003880:	00db      	lsls	r3, r3, #3
 8003882:	4413      	add	r3, r2
 8003884:	789b      	ldrb	r3, [r3, #2]
 8003886:	4619      	mov	r1, r3
 8003888:	4b10      	ldr	r3, [pc, #64]	; (80038cc <OS+0x78>)
 800388a:	781b      	ldrb	r3, [r3, #0]
 800388c:	4618      	mov	r0, r3
 800388e:	79fb      	ldrb	r3, [r7, #7]
 8003890:	4a0f      	ldr	r2, [pc, #60]	; (80038d0 <OS+0x7c>)
 8003892:	00db      	lsls	r3, r3, #3
 8003894:	4413      	add	r3, r2
 8003896:	785b      	ldrb	r3, [r3, #1]
 8003898:	3b01      	subs	r3, #1
 800389a:	4003      	ands	r3, r0
 800389c:	4299      	cmp	r1, r3
 800389e:	d105      	bne.n	80038ac <OS+0x58>
			{
				TaskTable[i].Task();
 80038a0:	79fb      	ldrb	r3, [r7, #7]
 80038a2:	4a0b      	ldr	r2, [pc, #44]	; (80038d0 <OS+0x7c>)
 80038a4:	00db      	lsls	r3, r3, #3
 80038a6:	4413      	add	r3, r2
 80038a8:	685b      	ldr	r3, [r3, #4]
 80038aa:	4798      	blx	r3
		for (enum TaskIdT i = TaskId_1ms; i < TaskIdNumber; i++)
 80038ac:	79fb      	ldrb	r3, [r7, #7]
 80038ae:	3301      	adds	r3, #1
 80038b0:	71fb      	strb	r3, [r7, #7]
 80038b2:	79fb      	ldrb	r3, [r7, #7]
 80038b4:	2b04      	cmp	r3, #4
 80038b6:	d9e1      	bls.n	800387c <OS+0x28>
	}
	else
	{
		OS_Idle();
	}
}
 80038b8:	e001      	b.n	80038be <OS+0x6a>
		OS_Idle();
 80038ba:	f7ff ffb9 	bl	8003830 <OS_Idle>
}
 80038be:	bf00      	nop
 80038c0:	3708      	adds	r7, #8
 80038c2:	46bd      	mov	sp, r7
 80038c4:	bd80      	pop	{r7, pc}
 80038c6:	bf00      	nop
 80038c8:	20000480 	.word	0x20000480
 80038cc:	20000481 	.word	0x20000481
 80038d0:	080039f8 	.word	0x080039f8

080038d4 <Wdg_Task>:
 *The function can feed dog and check Os Task.
 *
 **********************************************************
 **/
void Wdg_Task(void)
{
 80038d4:	b580      	push	{r7, lr}
 80038d6:	af00      	add	r7, sp, #0
	Wdg_FeedDog_Task();
 80038d8:	f000 f804 	bl	80038e4 <Wdg_FeedDog_Task>
	Wdg_Os_Check_Task();
 80038dc:	f000 f81c 	bl	8003918 <Wdg_Os_Check_Task>

}
 80038e0:	bf00      	nop
 80038e2:	bd80      	pop	{r7, pc}

080038e4 <Wdg_FeedDog_Task>:

static void Wdg_FeedDog_Task(void)
{
 80038e4:	b580      	push	{r7, lr}
 80038e6:	af00      	add	r7, sp, #0
	static uint8_t Wdg_Fdog_Cnt = 0;

	if(Wdg_FeedDogIndex == Wdg_Fdog_Cnt)
 80038e8:	4b09      	ldr	r3, [pc, #36]	; (8003910 <Wdg_FeedDog_Task+0x2c>)
 80038ea:	781b      	ldrb	r3, [r3, #0]
 80038ec:	2b05      	cmp	r3, #5
 80038ee:	d106      	bne.n	80038fe <Wdg_FeedDog_Task+0x1a>
	{
		Wdg_IWDG_Refresh_F_Hal();
 80038f0:	4808      	ldr	r0, [pc, #32]	; (8003914 <Wdg_FeedDog_Task+0x30>)
 80038f2:	f7fe ffaa 	bl	800284a <HAL_IWDG_Refresh>
		Wdg_Fdog_Cnt = 0;
 80038f6:	4b06      	ldr	r3, [pc, #24]	; (8003910 <Wdg_FeedDog_Task+0x2c>)
 80038f8:	2200      	movs	r2, #0
 80038fa:	701a      	strb	r2, [r3, #0]
	}
	else
	{
		Wdg_Fdog_Cnt++;
	}
}
 80038fc:	e005      	b.n	800390a <Wdg_FeedDog_Task+0x26>
		Wdg_Fdog_Cnt++;
 80038fe:	4b04      	ldr	r3, [pc, #16]	; (8003910 <Wdg_FeedDog_Task+0x2c>)
 8003900:	781b      	ldrb	r3, [r3, #0]
 8003902:	3301      	adds	r3, #1
 8003904:	b2da      	uxtb	r2, r3
 8003906:	4b02      	ldr	r3, [pc, #8]	; (8003910 <Wdg_FeedDog_Task+0x2c>)
 8003908:	701a      	strb	r2, [r3, #0]
}
 800390a:	bf00      	nop
 800390c:	bd80      	pop	{r7, pc}
 800390e:	bf00      	nop
 8003910:	20000482 	.word	0x20000482
 8003914:	20000428 	.word	0x20000428

08003918 <Wdg_Os_Check_Task>:

static void Wdg_Os_Check_Task(void)
{
 8003918:	b580      	push	{r7, lr}
 800391a:	af00      	add	r7, sp, #0
	static uint8_t Wdg_OsCheck_Cnt = 0;

	if(Wdg_Os_Check_Cycle == Wdg_OsCheck_Cnt)
 800391c:	4b0d      	ldr	r3, [pc, #52]	; (8003954 <Wdg_Os_Check_Task+0x3c>)
 800391e:	781b      	ldrb	r3, [r3, #0]
 8003920:	2b32      	cmp	r3, #50	; 0x32
 8003922:	d10e      	bne.n	8003942 <Wdg_Os_Check_Task+0x2a>
	{
		if((Wdg_OsCheck_Cnt <= Wdg_Os_Run_Limitmax)
 8003924:	4b0b      	ldr	r3, [pc, #44]	; (8003954 <Wdg_Os_Check_Task+0x3c>)
 8003926:	781b      	ldrb	r3, [r3, #0]
 8003928:	2b34      	cmp	r3, #52	; 0x34
 800392a:	d807      	bhi.n	800393c <Wdg_Os_Check_Task+0x24>
			&& (Wdg_OsCheck_Cnt >= Wdg_Os_Run_Limitmin))
 800392c:	4b09      	ldr	r3, [pc, #36]	; (8003954 <Wdg_Os_Check_Task+0x3c>)
 800392e:	781b      	ldrb	r3, [r3, #0]
 8003930:	2b2f      	cmp	r3, #47	; 0x2f
 8003932:	d903      	bls.n	800393c <Wdg_Os_Check_Task+0x24>
		{
			Wdg_OsCheck_Cnt = 0;
 8003934:	4b07      	ldr	r3, [pc, #28]	; (8003954 <Wdg_Os_Check_Task+0x3c>)
 8003936:	2200      	movs	r2, #0
 8003938:	701a      	strb	r2, [r3, #0]
	}
	else
	{
		Wdg_OsCheck_Cnt++;
	}
}
 800393a:	e008      	b.n	800394e <Wdg_Os_Check_Task+0x36>
			Wdg_Reset();
 800393c:	f000 f80c 	bl	8003958 <Wdg_Reset>
}
 8003940:	e005      	b.n	800394e <Wdg_Os_Check_Task+0x36>
		Wdg_OsCheck_Cnt++;
 8003942:	4b04      	ldr	r3, [pc, #16]	; (8003954 <Wdg_Os_Check_Task+0x3c>)
 8003944:	781b      	ldrb	r3, [r3, #0]
 8003946:	3301      	adds	r3, #1
 8003948:	b2da      	uxtb	r2, r3
 800394a:	4b02      	ldr	r3, [pc, #8]	; (8003954 <Wdg_Os_Check_Task+0x3c>)
 800394c:	701a      	strb	r2, [r3, #0]
}
 800394e:	bf00      	nop
 8003950:	bd80      	pop	{r7, pc}
 8003952:	bf00      	nop
 8003954:	20000483 	.word	0x20000483

08003958 <Wdg_Reset>:
 *The function can Rest soft.
 *
 **********************************************************
 **/
void Wdg_Reset(void)
{
 8003958:	b580      	push	{r7, lr}
 800395a:	af00      	add	r7, sp, #0
	Wdg_Reset_F_Hal();
 800395c:	f7fe ff23 	bl	80027a6 <HAL_NVIC_SystemReset>
}
 8003960:	bf00      	nop
 8003962:	bd80      	pop	{r7, pc}

08003964 <__libc_init_array>:
 8003964:	b570      	push	{r4, r5, r6, lr}
 8003966:	2600      	movs	r6, #0
 8003968:	4d0c      	ldr	r5, [pc, #48]	; (800399c <__libc_init_array+0x38>)
 800396a:	4c0d      	ldr	r4, [pc, #52]	; (80039a0 <__libc_init_array+0x3c>)
 800396c:	1b64      	subs	r4, r4, r5
 800396e:	10a4      	asrs	r4, r4, #2
 8003970:	42a6      	cmp	r6, r4
 8003972:	d109      	bne.n	8003988 <__libc_init_array+0x24>
 8003974:	f000 f822 	bl	80039bc <_init>
 8003978:	2600      	movs	r6, #0
 800397a:	4d0a      	ldr	r5, [pc, #40]	; (80039a4 <__libc_init_array+0x40>)
 800397c:	4c0a      	ldr	r4, [pc, #40]	; (80039a8 <__libc_init_array+0x44>)
 800397e:	1b64      	subs	r4, r4, r5
 8003980:	10a4      	asrs	r4, r4, #2
 8003982:	42a6      	cmp	r6, r4
 8003984:	d105      	bne.n	8003992 <__libc_init_array+0x2e>
 8003986:	bd70      	pop	{r4, r5, r6, pc}
 8003988:	f855 3b04 	ldr.w	r3, [r5], #4
 800398c:	4798      	blx	r3
 800398e:	3601      	adds	r6, #1
 8003990:	e7ee      	b.n	8003970 <__libc_init_array+0xc>
 8003992:	f855 3b04 	ldr.w	r3, [r5], #4
 8003996:	4798      	blx	r3
 8003998:	3601      	adds	r6, #1
 800399a:	e7f2      	b.n	8003982 <__libc_init_array+0x1e>
 800399c:	08003a20 	.word	0x08003a20
 80039a0:	08003a20 	.word	0x08003a20
 80039a4:	08003a20 	.word	0x08003a20
 80039a8:	08003a24 	.word	0x08003a24

080039ac <memset>:
 80039ac:	4603      	mov	r3, r0
 80039ae:	4402      	add	r2, r0
 80039b0:	4293      	cmp	r3, r2
 80039b2:	d100      	bne.n	80039b6 <memset+0xa>
 80039b4:	4770      	bx	lr
 80039b6:	f803 1b01 	strb.w	r1, [r3], #1
 80039ba:	e7f9      	b.n	80039b0 <memset+0x4>

080039bc <_init>:
 80039bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80039be:	bf00      	nop
 80039c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80039c2:	bc08      	pop	{r3}
 80039c4:	469e      	mov	lr, r3
 80039c6:	4770      	bx	lr

080039c8 <_fini>:
 80039c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80039ca:	bf00      	nop
 80039cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80039ce:	bc08      	pop	{r3}
 80039d0:	469e      	mov	lr, r3
 80039d2:	4770      	bx	lr
